{
	"info": {
		"_postman_id": "345e0b65-7b04-4968-8546-35b6a831cc8c",
		"name": "Unit Testing (External requests)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39565350",
		"_collection_link": "https://gachaandgames.postman.co/workspace/GachaAndGames-Workspace~cb432b14-a1a2-4bdb-87b8-18f81b18016e/collection/39565350-345e0b65-7b04-4968-8546-35b6a831cc8c?action=share&source=collection_link&creator=39565350"
	},
	"item": [
		{
			"name": "Auth Service Tests",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Auth}}/auth/health_check",
							"host": [
								"{{baseUrl_Auth}}"
							],
							"path": [
								"auth",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// POST {{baseUrl}}/auth/register\r",
									"pm.test(\"Register Success\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    // Save bearer token from Authorization header without 'Bearer ' prefix\r",
									"    const authHeader = pm.response.headers.get('Authorization');\r",
									"    if (authHeader && authHeader.startsWith('Bearer ')) {\r",
									"        const token = authHeader.replace('Bearer ', '');\r",
									"        pm.environment.set('Authorization', token);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Verify Authorization header exists and token was saved\r",
									"pm.test(\"Authorization token saved correctly\", () => {\r",
									"    const auth = pm.environment.get('Authorization');\r",
									"    pm.expect(auth).to.exist;\r",
									"    pm.expect(auth).to.not.include('Bearer');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{normal_username}}\",\r\n    \"email\": \"{{email_to_register}}\",\r\n    \"password\": \"{{normal_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Auth}}/auth/register",
							"host": [
								"{{baseUrl_Auth}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register email already chosen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// POST {{baseUrl}}/auth/register\r",
									"pm.test(\"Register With invalid credentials\", () => {\r",
									"    pm.response.to.have.status(503);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{user_to_register}}\",\r\n    \"email\": \"speedwagon@foundation.org\",\r\n    \"password\": \"{{password_to_register}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Auth}}}/auth/register",
							"host": [
								"{{baseUrl_Auth}}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test script for Logout\r",
									"pm.test(\"Logout successful\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Rimuovi il token di autorizzazione dall'ambiente\r",
									"pm.test(\"Bearer token removed\", () => {\r",
									"    const token = pm.environment.get('Authorization');\r",
									"    if (token) {\r",
									"        pm.environment.set('Authorization', '');\r",
									"    }\r",
									"    pm.expect(pm.environment.get('Authorization')).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Auth}}/auth/logout",
							"host": [
								"{{baseUrl_Auth}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Normale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test script for Login\r",
									"pm.test(\"Login successful\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Save bearer token from Authorization header without 'Bearer ' prefix\r",
									"    const authHeader = pm.response.headers.get('Authorization');\r",
									"    if (authHeader && authHeader.startsWith('Bearer ')) {\r",
									"        const token = authHeader.replace('Bearer ', '');\r",
									"        pm.environment.set('Authorization', token);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Verify Authorization header exists and token was saved\r",
									"pm.test(\"Authorization token saved correctly\", () => {\r",
									"    const auth = pm.environment.get('Authorization');\r",
									"    pm.expect(auth).to.exist;\r",
									"    pm.expect(auth).to.not.include('Bearer');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{normal_username}}\",  \r\n    \"password\": \"{{normal_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Auth}}/auth/login",
							"host": [
								"{{baseUrl_Auth}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Normale Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test script for Login\r",
									"pm.test(\"Login successfully failed\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"franco1234\",  \r\n    \"password\": \"{{normal_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Auth}}/auth/login",
							"host": [
								"{{baseUrl_Auth}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auctions Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/health_check",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createAuction = async (startingPrice, itemOwnerId, itemId) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/create?starting_price=${startingPrice}&inventory_item_owner_id=${itemOwnerId}&inventory_item_id=${itemId}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/create?starting_price=10&inventory_item_owner_id={{user_uuid}}&inventory_item_id={{item_uuid}}",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"create"
							],
							"query": [
								{
									"key": "starting_price",
									"value": "10"
								},
								{
									"key": "inventory_item_owner_id",
									"value": "{{user_uuid}}"
								},
								{
									"key": "Cookie",
									"value": "",
									"disabled": true
								},
								{
									"key": "inventory_item_id",
									"value": "{{item_uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Auction not your item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createAuction = async (startingPrice, itemOwnerId, itemId) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/create?starting_price=${startingPrice}&inventory_item_owner_id=${itemOwnerId}&inventory_item_id=${itemId}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/create?starting_price=10&inventory_item_owner_id={{user_uuid}}&inventory_item_id=f7e6d5c4-b3a2-9180-7654-321098fedcba",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"create"
							],
							"query": [
								{
									"key": "starting_price",
									"value": "10"
								},
								{
									"key": "inventory_item_owner_id",
									"value": "{{user_uuid}}"
								},
								{
									"key": "inventory_item_id",
									"value": "f7e6d5c4-b3a2-9180-7654-321098fedcba"
								},
								{
									"key": "Cookie",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create auction Invalid starting price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createAuction = async (startingPrice, itemOwnerId, itemId) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/create?starting_price=${startingPrice}&inventory_item_owner_id=${itemOwnerId}&inventory_item_id=${itemId}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"// Test Script\r",
									"pm.test(\"Should return 400 for invalid starting price\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/create?inventory_item_owner_id={{user_uuid}}&starting_price=0&inventory_item_id={{SpeedWagon_item#1}}",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"create"
							],
							"query": [
								{
									"key": "inventory_item_owner_id",
									"value": "{{user_uuid}}"
								},
								{
									"key": "Cookie",
									"value": "",
									"disabled": true
								},
								{
									"key": "starting_price",
									"value": "0"
								},
								{
									"key": "inventory_item_id",
									"value": "{{SpeedWagon_item#1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bid on Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const bidOnAuction = async (auctionUuid, bidAmount) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/bid/${auctionUuid}?bid=${bidAmount}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/bid/{{auction_to_bid_to_uuid}}?bid=1",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"bid",
								"{{auction_to_bid_to_uuid}}"
							],
							"query": [
								{
									"key": "bid",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bid on your own  Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const bidOnAuction = async (auctionUuid, bidAmount) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/bid/${auctionUuid}?bid=${bidAmount}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/bid/a9b8c7d6-e5f4-3210-9876-fedcba987321?bid=1",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"bid",
								"a9b8c7d6-e5f4-3210-9876-fedcba987321"
							],
							"query": [
								{
									"key": "bid",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auction Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get Auction Status\r",
									"const getAuctionStatus = async (auctionUuid) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/status/${auctionUuid}`, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/status/{{auction_to_bid_to_uuid}}",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"status",
								"{{auction_to_bid_to_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auction Status Invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get Auction Status\r",
									"const getAuctionStatus = async (auctionUuid) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/status/${auctionUuid}`, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/status/12",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"status",
								"12"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auctions History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAuctionsHistory = async (pageNumber = 1) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/history?page_number=${pageNumber}`, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/history?page_number=1",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"history"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auctions History Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAuctionsHistory = async (pageNumber = 1) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/history?page_number=${pageNumber}`, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/history?page_number=-1",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"history"
							],
							"query": [
								{
									"key": "page_number",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auctions List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAuctionsList = async (status = 'active', rarity = null, pageNumber = 1) => {\r",
									"    try {\r",
									"        let url = `${baseUrl}/list?status=${status}&page_number=${pageNumber}`;\r",
									"        if (rarity) url += `&rarity=${rarity}`;\r",
									"        \r",
									"        const response = await fetch(url, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/list?page_number=1&status=open",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"list"
							],
							"query": [
								{
									"key": "status",
									"value": "closed",
									"disabled": true
								},
								{
									"key": "page_number",
									"value": "1"
								},
								{
									"key": "status",
									"value": "open"
								},
								{
									"key": "rarity",
									"value": "legendary",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auctions List Bad request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAuctionsList = async (status = 'active', rarity = null, pageNumber = 1) => {\r",
									"    try {\r",
									"        let url = `${baseUrl}/list?status=${status}&page_number=${pageNumber}`;\r",
									"        if (rarity) url += `&rarity=${rarity}`;\r",
									"        \r",
									"        const response = await fetch(url, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_auctions}}/auction/list?status=closed&page_number=1&rarity=legendary1",
							"host": [
								"{{baseUrl_auctions}}"
							],
							"path": [
								"auction",
								"list"
							],
							"query": [
								{
									"key": "status",
									"value": "closed"
								},
								{
									"key": "page_number",
									"value": "1"
								},
								{
									"key": "status",
									"value": "open",
									"disabled": true
								},
								{
									"key": "rarity",
									"value": "legendary1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feedback Service Tests",
			"item": [
				{
					"name": "Health check",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_feedback}}/feedback/health_check",
							"host": [
								"{{baseUrl_feedback}}"
							],
							"path": [
								"feedback",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Feedback with invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"string\": \"\"  // Empty string\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_feedback}}/feedback/",
							"host": [
								"{{baseUrl_feedback}}"
							],
							"path": [
								"feedback",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const postFeedback = async (feedbackContent) => {\r",
									"    try {\r",
									"        const response = await fetch('{{baseUrl}}/feedback/', {\r",
									"            method: 'POST',\r",
									"            headers: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            credentials: 'include', // Necessary for sending cookies\r",
									"            body: JSON.stringify({\r",
									"                string: feedbackContent\r",
									"            })\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error posting feedback:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_feedback}}/feedback/?string=✨ OMG, THIS GAME IS A MASTERPIECE!!! 😭🔥 +1000 AURA",
							"host": [
								"{{baseUrl_feedback}}"
							],
							"path": [
								"feedback",
								""
							],
							"query": [
								{
									"key": "string",
									"value": "✨ OMG, THIS GAME IS A MASTERPIECE!!! 😭🔥 +1000 AURA"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gacha Service Tests",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const healthCheck = async () => {\r",
									"    try {\r",
									"        const response = await fetch('{{baseUrl}}/gacha/health_check', {\r",
									"            method: 'GET',\r",
									"            headers: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        });\r",
									"        \r",
									"        // Assertions\r",
									"        expect(response.status).toBe(200);\r",
									"        const data = await response.json();\r",
									"        expect(data.message).toBe(\"Service operational.\");\r",
									"        \r",
									"        return data;\r",
									"    } catch (error) {\r",
									"        console.error('Health check error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/health_check",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gacha Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"var response = pm.response.json();\r",
									"\r",
									"// Helper function to validate UUID format\r",
									"function isValidUUID(uuid) {\r",
									"    var regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r",
									"    return regex.test(uuid);\r",
									"}\r",
									"\r",
									"// Test that the response has all required top-level properties\r",
									"pm.test(\"Response has all required properties\", function () {\r",
									"    pm.expect(response).to.have.property('gacha_uuid');\r",
									"    pm.expect(response).to.have.property('name');\r",
									"    pm.expect(response).to.have.property('rarity');\r",
									"    pm.expect(response).to.have.property('attributes');\r",
									"});\r",
									"\r",
									"// Test that 'gacha_uuid' is a valid UUID\r",
									"pm.test(\"'gacha_uuid' is a valid UUID\", function () {\r",
									"    pm.expect(response.gacha_uuid).to.be.a('string');\r",
									"    pm.expect(isValidUUID(response.gacha_uuid)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test that 'name' is a non-empty string\r",
									"pm.test(\"'name' is a non-empty string\", function () {\r",
									"    pm.expect(response.name).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test that 'rarity' is a non-empty string\r",
									"pm.test(\"'rarity' is a non-empty string\", function () {\r",
									"    pm.expect(response.rarity).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test that 'attributes' is an object with required properties\r",
									"pm.test(\"'attributes' has all required properties\", function () {\r",
									"    pm.expect(response.attributes).to.be.an('object');\r",
									"\r",
									"    var requiredAttributes = ['power', 'speed', 'durability', 'precision', 'range', 'potential'];\r",
									"    requiredAttributes.forEach(function(attr) {\r",
									"        pm.expect(response.attributes).to.have.property(attr);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test that each attribute value is a non-empty string\r",
									"pm.test(\"All attribute values are non-empty strings\", function () {\r",
									"    Object.values(response.attributes).forEach(function(value) {\r",
									"        pm.expect(value).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/{{gacha_uuid}}",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"{{gacha_uuid}}"
							],
							"query": [
								{
									"key": "gachauuid",
									"value": "1b2f7b4e-5e1f-4112-a7c5-b7559dbb8c76",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Gacha Info Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/e7f8a9b0-c1d2-3e4f-5a6b-7c8d9e0f1a2a",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"e7f8a9b0-c1d2-3e4f-5a6b-7c8d9e0f1a2a"
							],
							"query": [
								{
									"key": "gachauuid",
									"value": "1b2f7b4e-5e1f-4112-a7c5-b7559dbb8c76",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pull Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test status code\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Test Content-Type header\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Parse response body and save gacha_uuid\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"pulled_gacha\", jsonData.gacha.gacha_uuid);\r",
									"\r",
									"// Optional: Add test to verify gacha_uuid was extracted\r",
									"pm.test(\"gacha_uuid is saved correctly\", function () {\r",
									"    pm.expect(jsonData.gacha.gacha_uuid).to.be.a('string');\r",
									"    pm.expect(jsonData.gacha.gacha_uuid).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Optional: Add test to verify image was extracted\r",
									"pm.test(\"image is saved correctly\", function () {\r",
									"    pm.expect(jsonData.image).to.be.a('string');\r",
									"    pm.expect(jsonData.image).to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/pull/{{pool_id}}",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"pull",
								"{{pool_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pull Gacha Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/pull/pool_inesistente",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"pull",
								"pool_inesistente"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pools Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(pool) {\r",
									"        pm.expect(pool).to.be.an('object');\r",
									"        pm.expect(pool).to.have.property('id');\r",
									"        pm.expect(pool).to.have.property('items');\r",
									"        pm.expect(pool).to.have.property('name');\r",
									"        pm.expect(pool).to.have.property('probabilities');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Attributes within items have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(pool => {\r",
									"        pm.expect(pool.items).to.be.an('array');\r",
									"        pool.items.forEach(item => {\r",
									"            pm.expect(item.attributes).to.be.an('object');\r",
									"            pm.expect(item.attributes.durability).to.exist;\r",
									"            pm.expect(item.attributes.potential).to.exist;\r",
									"            pm.expect(item.attributes.power).to.exist;\r",
									"            pm.expect(item.attributes.precision).to.exist;\r",
									"            pm.expect(item.attributes.range).to.exist;\r",
									"            pm.expect(item.attributes.speed).to.exist;\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/pools",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pools Info Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/pools",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gachas list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('attributes');\r",
									"        pm.expect(item).to.have.property('gacha_uuid');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All attributes are present and not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.attributes).to.exist.and.to.be.an('object');\r",
									"    pm.expect(item.attributes.durability).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.potential).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.power).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.precision).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.range).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.speed).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Rarity is a valid and not empty value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('rarity').that.is.not.empty;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/list?not_owned=false",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"list"
							],
							"query": [
								{
									"key": "not_owned",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gachas list Invalid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_gacha}}/gacha/list?not_owned=ftrue",
							"host": [
								"{{baseUrl_gacha}}"
							],
							"path": [
								"gacha",
								"list"
							],
							"query": [
								{
									"key": "not_owned",
									"value": "ftrue"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Inventory Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory/health_check",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getInventory = async (pageNumber = 1) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}?page_number=${pageNumber}`, {\r",
									"            method: 'GET',\r",
									"            headers: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            credentials: 'include' // For sending cookies\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Get inventory error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory?page_number=1",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory (Paginated) Invalid page number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory?page_number=-1",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory"
							],
							"query": [
								{
									"key": "page_number",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory Item info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo stato della risposta sia 200 OK\r",
									"pm.test(\"La risposta ha lo stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che il contenuto della risposta sia in formato JSON\r",
									"pm.test(\"Il contenuto della risposta è JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Ottieni il corpo della risposta\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Verifica che l'oggetto abbia tutte le proprietà richieste\r",
									"pm.test(\"L'oggetto ha il formato corretto\", function() {\r",
									"    pm.expect(responseData).to.have.property(\"owner_id\");\r",
									"    pm.expect(responseData).to.have.property(\"item_id\");\r",
									"    pm.expect(responseData).to.have.property(\"gacha_uuid\");\r",
									"    pm.expect(responseData).to.have.property(\"obtained_date\");\r",
									"    pm.expect(responseData).to.have.property(\"owners_no\");\r",
									"    pm.expect(responseData).to.have.property(\"price_paid\");\r",
									"});\r",
									"\r",
									"// Verifica i tipi di dato\r",
									"pm.test(\"I tipi di dato sono corretti\", function() {\r",
									"    pm.expect(responseData.owner_id).to.be.a(\"string\");\r",
									"    pm.expect(responseData.item_id).to.be.a(\"string\");\r",
									"    pm.expect(responseData.gacha_uuid).to.be.a(\"string\");\r",
									"    pm.expect(responseData.owners_no).to.be.a(\"number\");\r",
									"    pm.expect(responseData.price_paid).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory/{{item_uuid}}",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory",
								"{{item_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory Item info Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory/c7b6a5d4-e3f2-1098-7654-fedcba987651",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory",
								"c7b6a5d4-e3f2-1098-7654-fedcba987651"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory/?inventory_item_owner_id={{user_uuid}}&inventory_item_id={{item_uuid}}",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory",
								""
							],
							"query": [
								{
									"key": "inventory_item_owner_id",
									"value": "{{user_uuid}}"
								},
								{
									"key": "inventory_item_id",
									"value": "{{item_uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item Invalid request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Inventory}}/inventory/?inventory_item_id={{item_uuid}}",
							"host": [
								"{{baseUrl_Inventory}}"
							],
							"path": [
								"inventory",
								""
							],
							"query": [
								{
									"key": "inventory_item_id",
									"value": "{{item_uuid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PvP Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/health_check",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send PVP Request 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Send PVP Request Test\r",
									"pm.test(\"Send PVP Request\", function () {\r",
									"    // Check status code\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Parse response\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    // Extract UUID using regex\r",
									"    const uuidMatch = responseData.message.match(/([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/i);\r",
									"    \r",
									"    if (uuidMatch) {\r",
									"        // Save UUID to environment variable\r",
									"        pm.environment.set(\"pvp_match_uuid\", uuidMatch[0]);\r",
									"        console.log(\"Saved PVP match UUID:\", uuidMatch[0]);\r",
									"    } else {\r",
									"        console.error(\"Could not extract UUID from response\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ //item di SpeedWagon\r\n    \"{{SpeedWagon_item#1}}\", // Star Platinum\r\n    \"{{SpeedWagon_item#2}}\", // The World  \r\n    \"{{SpeedWagon_item#3}}\", // Gold Experience\r\n    \"{{SpeedWagon_item#4}}\", // Crazy Diamond\r\n    \"{{SpeedWagon_item#5}}\", // Silver Chariot\r\n    \"{{SpeedWagon_item#6}}\", // Hermit Purple\r\n    \"{{SpeedWagon_item#7}}\"  // Magicians Red\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/sendPvPRequest/{{user_uuid2}}",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"sendPvPRequest",
								"{{user_uuid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send PVP Request 406",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Send PVP Request Test\r",
									"pm.test(\"Send PVP Request\", function () {\r",
									"    // Check status code\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    // Parse response\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    // Extract UUID using regex\r",
									"    const uuidMatch = responseData.message.match(/([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/i);\r",
									"    \r",
									"    if (uuidMatch) {\r",
									"        // Save UUID to environment variable\r",
									"        pm.environment.set(\"pvp_match_uuid\", uuidMatch[0]);\r",
									"        console.log(\"Saved PVP match UUID:\", uuidMatch[0]);\r",
									"    } else {\r",
									"        console.error(\"Could not extract UUID from response\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ //item di SpeedWagon\r\n    \"{{SpeedWagon_item#1}}\", // Star Platinum\r\n    \"{{SpeedWagon_item#2}}\", // The World  \r\n    \"{{SpeedWagon_item#3}}\", // Gold Experience\r\n    \"{{SpeedWagon_item#4}}\", // Crazy Diamond\r\n    \"{{SpeedWagon_item#5}}\", // Silver Chariot\r\n    \"{{SpeedWagon_item#6}}\", // Hermit Purple\r\n    \"{{SpeedWagon_item#7}}\"  // Magicians Red\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/sendPvPRequest/4f2e8bb5-38e1-4537-9cfa-11425c3b4284",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"sendPvPRequest",
								"4f2e8bb5-38e1-4537-9cfa-11425c3b4284"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept PVP Request 200",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ //item di SpeedWagon\r\n    \"{{SpeedWagon_item#1}}\", // Star Platinum\r\n    \"{{SpeedWagon_item#2}}\", // The World  \r\n    \"{{SpeedWagon_item#3}}\", // Gold Experience\r\n    \"{{SpeedWagon_item#4}}\", // Crazy Diamond\r\n    \"{{SpeedWagon_item#5}}\", // Silver Chariot\r\n    \"{{SpeedWagon_item#6}}\", // Hermit Purple\r\n    \"{{SpeedWagon_item#7}}\"  // Magicians Red\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/acceptPvPRequest/d51729c7-7674-4e62-86b5-70b028d686d5",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"acceptPvPRequest",
								"d51729c7-7674-4e62-86b5-70b028d686d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Accept PVP Request 404",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[ //item di SpeedWagon\r\n    \"{{SpeedWagon_item#1}}\", // Star Platinum\r\n    \"{{SpeedWagon_item#2}}\", // The World  \r\n    \"{{SpeedWagon_item#3}}\", // Gold Experience\r\n    \"{{SpeedWagon_item#4}}\", // Crazy Diamond\r\n    \"{{SpeedWagon_item#5}}\", // Silver Chariot\r\n    \"{{SpeedWagon_item#6}}\", // Hermit Purple\r\n    \"{{SpeedWagon_item#7}}\"  // Magicians Red\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/acceptPvPRequest/a1b2c3d4-0000-0000-0000-ef1234567890",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"acceptPvPRequest",
								"a1b2c3d4-0000-0000-0000-ef1234567890"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject PVP Request 200",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/rejectPvPRequest/d51729c7-7674-4e62-86b5-70b028d686d5",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"rejectPvPRequest",
								"d51729c7-7674-4e62-86b5-70b028d686d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reject PVP Request 404",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/rejectPvPRequest/d51729c7-0000-0000-0000-70b028d686d5",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"rejectPvPRequest",
								"d51729c7-0000-0000-0000-70b028d686d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Pending PVP Requests 200",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/checkPendingPvPRequests",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"checkPendingPvPRequests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Pending PVP Requests 401",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/checkPendingPvPRequests",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"checkPendingPvPRequests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PVP Match Status 200",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/status/d51729c7-7674-4e62-86b5-70b028d686d5",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"status",
								"d51729c7-7674-4e62-86b5-70b028d686d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PVP Match Status 404",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_PvP}}/pvp/status/d51729c7-0000-0000-0000-70b028d686d5",
							"host": [
								"{{baseUrl_PvP}}"
							],
							"path": [
								"pvp",
								"status",
								"d51729c7-0000-0000-0000-70b028d686d5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Profile}}/profile/health_check",
							"host": [
								"{{baseUrl_Profile}}"
							],
							"path": [
								"profile",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edit Profile Status Code Tests\", function () {\r",
									"    // Test response code\r",
									"    if (pm.response.code === 304) {\r",
									"        pm.expect(pm.response.code).to.equal(304);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"message\", \"No changes needed\");\r",
									"    } else if (pm.response.code === 200) {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    } else if (pm.response.code === 404) {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"User not found\");\r",
									"    } else if (pm.response.code === 403) {\r",
									"        pm.expect(pm.response.code).to.equal(403);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Not logged in\");\r",
									"    } else if (pm.response.code === 400) {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Invalid fields\");\r",
									"    } else if (pm.response.code === 500) {\r",
									"        pm.expect(pm.response.code).to.equal(500);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Error updating profile\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test response headers\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response structure is correct\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    if (pm.response.code === 200 || pm.response.code === 304) {\r",
									"        pm.expect(responseJson).to.have.property(\"message\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    } else {\r",
									"        pm.expect(responseJson).to.have.property(\"error\");\r",
									"        pm.expect(responseJson.error).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is acceptable\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"new1231em1ail@exampole.com\",\r\n    \"username\": \"newUsern1amqe123412\",\r\n    \"password\": \"{{password}}\"  //we suppose it's done with the admin credentials, but you could use any\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Profile}}/profile/edit",
							"host": [
								"{{baseUrl_Profile}}"
							],
							"path": [
								"profile",
								"edit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Profile Invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edit Profile Status Code Tests\", function () {\r",
									"    // Test response code\r",
									"    if (pm.response.code === 304) {\r",
									"        pm.expect(pm.response.code).to.equal(304);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"message\", \"No changes needed\");\r",
									"    } else if (pm.response.code === 200) {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    } else if (pm.response.code === 404) {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"User not found\");\r",
									"    } else if (pm.response.code === 403) {\r",
									"        pm.expect(pm.response.code).to.equal(403);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Not logged in\");\r",
									"    } else if (pm.response.code === 400) {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Invalid fields\");\r",
									"    } else if (pm.response.code === 500) {\r",
									"        pm.expect(pm.response.code).to.equal(500);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Error updating profile\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test response headers\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response structure is correct\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    if (pm.response.code === 200 || pm.response.code === 304) {\r",
									"        pm.expect(responseJson).to.have.property(\"message\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    } else {\r",
									"        pm.expect(responseJson).to.have.property(\"error\");\r",
									"        pm.expect(responseJson.error).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is acceptable\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"new1231em1ail@exampole.com\",\r\n    \"username\": \"newUsern1amqe123412\",\r\n    \"password\": \"Admin_foundation\"   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Profile}}/profile/edit",
							"host": [
								"{{baseUrl_Profile}}"
							],
							"path": [
								"profile",
								"edit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('currency', 'pvp_score', 'created_at', 'username');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Profile}}/profile/{{user_uuid}}/info",
							"host": [
								"{{baseUrl_Profile}}"
							],
							"path": [
								"profile",
								"{{user_uuid}}",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info not found user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_Profile}}/profile/4f2e8bb5-38e1-4537-9cfa-11425c3b4281/info",
							"host": [
								"{{baseUrl_Profile}}"
							],
							"path": [
								"profile",
								"4f2e8bb5-38e1-4537-9cfa-11425c3b4281",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - error\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.error).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"za_warudo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_Profile}}/profile/delete",
							"host": [
								"{{baseUrl_Profile}}"
							],
							"path": [
								"profile",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency Service Tests",
			"item": [
				{
					"name": "Buy bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_currency}}/currency/buy/bundle_arrowEUR",
							"host": [
								"{{baseUrl_currency}}"
							],
							"path": [
								"currency",
								"buy",
								"bundle_arrowEUR"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buy bundle Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_currency}}/currency/buy/bundle_arrowEURO",
							"host": [
								"{{baseUrl_currency}}"
							],
							"path": [
								"currency",
								"buy",
								"bundle_arrowEURO"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_currency}}/currency/bundles",
							"host": [
								"{{baseUrl_currency}}"
							],
							"path": [
								"currency",
								"bundles"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles Invalid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid request returns 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Invalid request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Authorization}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_currency}}/currency/bundl3s",
							"host": [
								"{{baseUrl_currency}}"
							],
							"path": [
								"currency",
								"bundl3s"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_currency}}/currency/health_check",
							"host": [
								"{{baseUrl_currency}}"
							],
							"path": [
								"currency",
								"health_check"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}