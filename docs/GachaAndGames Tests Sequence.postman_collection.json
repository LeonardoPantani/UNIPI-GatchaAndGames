{
	"info": {
		"_postman_id": "96515794-4b07-4dad-8425-f34eff030f7a",
		"name": "GachaAndGames Tests Sequence",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39565350",
		"_collection_link": "https://gachaandgames.postman.co/workspace/GachaAndGames-Workspace~cb432b14-a1a2-4bdb-87b8-18f81b18016e/collection/39565350-96515794-4b07-4dad-8425-f34eff030f7a?action=share&source=collection_link&creator=39565350"
	},
	"item": [
		{
			"name": "Auth Service Tests",
			"item": [
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/health_check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register (successful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// POST {{baseUrl}}/auth/register\r",
									"pm.test(\"Register Success\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Register Validation\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('uuid');\r",
									"    pm.expect(response).to.have.property('username'); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{user_to_register}}\",\r\n    \"email\": \"{{email_to_register}}\",\r\n    \"password\": \"{{password_to_register}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register for invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid email should return 406\", function() {\r",
									"    pm.response.to.have.status(406);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"The specified email is not valid.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{user_to_register}}\",\r\n    \"email\": \"{{invalid_email}}\",\r\n    \"password\": \"{{password_to_register}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with duplicate username/email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Duplicate username/email should return 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"The provided username / email is already in use.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{user_to_register}}\",\r\n    \"email\": \"{{email_to_register}}\",\r\n    \"password\": \"{{password_to_register}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test script per Login\r",
									"pm.test(\"Login successful\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    // Salva cookie sessione \r",
									"    const sessionCookie = pm.cookies.get('session') // cookie name as string\r",
									"    if (sessionCookie) {\r",
									"        pm.environment.set('session_id', sessionCookie);\r",
									"    }\r",
									"});\r",
									"\r",
									"// Verifica presenza cookie\r",
									"pm.test(\"Session cookie exists\", () => {\r",
									"    pm.expect(pm.cookies.has('session')).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"username\": \"{{username}}\",  \r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test invalid credentials (401) \r",
									"pm.test(\"Invalid credentials returns 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Invalid credentials.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username2}}\",  \r\n    \"password\": \"{{password2}}+5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (already logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Already logged in should return 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"You are already logged in.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username2}}\",  \r\n    \"password\": \"{{password2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout Success\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Session Cookie Removed\", () => {\r",
									"    pm.expect(pm.cookies.has('session')).to.be.false;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout when not logged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout when not authenticated should return 403\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Not logged in.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin Service Tests",
			"item": [
				{
					"name": "Admin Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.equal(\"Service operational.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/health_check",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ban Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ban Profile\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Not Authorized if not Admin\", () => {\r",
									"    if (!pm.request.headers.has(\"Cookie\")) {\r",
									"        pm.response.to.have.status(403);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{uuid_to_ban}}/ban",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{uuid_to_ban}}",
								"ban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ban yourself",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 406 when trying to ban yourself\", function() {\r",
									"    pm.response.to.have.status(406);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"You cannot delete your account like this.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"async function executeRequests() {\r",
									"    try {\r",
									"        await pm.sendRequest(logoutRequest);\r",
									"        console.log(\"Logout completed\");\r",
									"        await pm.sendRequest(loginRequest);\r",
									"        console.log(\"Login completed\");\r",
									"    } catch (err) {\r",
									"        console.error('Error in requests:', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"executeRequests();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{user_uuid}}/ban",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{user_uuid}}",
								"ban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ban an admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 409 when trying to ban an admin\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Cannot ban a user with the ADMIN role.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"AdminUser\",\r",
									"            \"password\": \"password\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"async function executeRequests() {\r",
									"    try {\r",
									"        await pm.sendRequest(logoutRequest);\r",
									"        console.log(\"Logout completed\");\r",
									"        await pm.sendRequest(loginRequest);\r",
									"        console.log(\"Login completed\");\r",
									"    } catch (err) {\r",
									"        console.error('Error in requests:', err);\r",
									"    }\r",
									"}\r",
									"\r",
									"executeRequests();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{user_uuid}}/ban",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{user_uuid}}",
								"ban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized user ban profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized ban attempt should return 403\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    }\r",
									"    // After logout, do login\r",
									"    pm.sendRequest(loginRequest, function (err, res) {\r",
									"        if (err) {\r",
									"            console.error(err);\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{uuid_to_ban}}/ban",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{uuid_to_ban}}",
								"ban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Not logged in Ban",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized ban attempt should return 403\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{uuid_to_ban}}/ban",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{uuid_to_ban}}",
								"ban"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gacha_uuid\": \"{{gacha_to_create}}\",\r\n    \"name\": \"Prova\",\r\n    \"attributes\": {\r\n        \"durability\": \"A\",\r\n        \"precision\": \"A\",\r\n        \"range\": \"A\", \r\n        \"power\": \"A\",\r\n        \"potential\": \"A\",\r\n        \"speed\": \"A\"\r\n    },\r\n    \"rarity\": \"rare\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Gacha Duplicate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script\r",
									"pm.test(\"Should return 409 for duplicate gacha UUID\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"The provided gacha uuid is already in use.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gacha_uuid\": \"{{gacha_to_create}}\",\r\n    \"name\": \"Prova\",\r\n    \"attributes\": {\r\n        \"durability\": \"A\",\r\n        \"precision\": \"A\",\r\n        \"range\": \"A\", \r\n        \"power\": \"A\",\r\n        \"potential\": \"A\",\r\n        \"speed\": \"A\"\r\n    },\r\n    \"rarity\": \"rare\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Gacha Invalid Fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 400 for invalid fields\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"detail\", \"'INVALID_RARITY' is not one of ['common', 'rare', 'epic', 'legendary'] - 'rarity'\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gacha_uuid\": \"{{gacha_to_create}}\",\r\n    \"name\": \"Prova\",\r\n    \"attributes\": {\r\n        \"durability\": \"A\",\r\n        \"precision\": \"A\",\r\n        \"range\": \"A\", \r\n        \"power\": \"A\",\r\n        \"potential\": \"A\",\r\n        \"speed\": \"A\"\r\n    },\r\n    \"rarity\": \"INVALID_RARITY\" //campo non valido\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Create Gacha (non admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script\r",
									"pm.test(\"Should return 403 for non-admin user\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gacha_uuid\": \"{{gacha_to_create}}\",\r\n    \"name\": \"Prova\",\r\n    \"attributes\": {\r\n        \"durability\": \"A\",\r\n        \"precision\": \"A\",\r\n        \"range\": \"A\", \r\n        \"power\": \"A\",\r\n        \"potential\": \"A\",\r\n        \"speed\": \"A\"\r\n    },\r\n    \"rarity\": \"rare\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Create Gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 for unauthorized access\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gacha_uuid\": \"{{gacha_to_create}}\",\r\n    \"name\": \"Prova\",\r\n    \"attributes\": {\r\n        \"durability\": \"A\",\r\n        \"precision\": \"A\",\r\n        \"range\": \"A\", \r\n        \"power\": \"A\",\r\n        \"potential\": \"A\",\r\n        \"speed\": \"A\"\r\n    },\r\n    \"rarity\": \"rare\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Gacha",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"gacha_uuid\": \"{{gacha_to_create}}\",\r\n    \"name\": \"Prova\",\r\n    \"attributes\": {\r\n        \"durability\": \"A\",\r\n        \"precision\": \"A\",\r\n        \"range\": \"A\", \r\n        \"power\": \"A\",\r\n        \"potential\": \"A\",\r\n        \"speed\": \"A\"\r\n    },\r\n    \"rarity\": \"rare\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/{{gacha_to_delete}}/delete",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"{{gacha_to_delete}}",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non existent Gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404 for non-existent gacha\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Gacha not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/1b2f7b4e-5e1f-4112-a7c5-b7559dbb8v12/delete",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"1b2f7b4e-5e1f-4112-a7c5-b7559dbb8v12",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete non existent Gacha Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script\r",
									"pm.test(\"Should return 403 when not admin\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/1b2f7b4e-5e1f-4112-a7c5-b7559dbb8v12/delete",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"1b2f7b4e-5e1f-4112-a7c5-b7559dbb8v12",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pool Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Pool Success\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Probabilities Sum\", () => {\r",
									"    const requestData = JSON.parse(pm.request.body.raw);\r",
									"    const probs = requestData.probabilities;\r",
									"    const sum = probs.legendaryProbability + probs.epicProbability + \r",
									"                probs.commonProbability + probs.rareProbability;\r",
									"    pm.expect(sum).to.equal(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Spool Pool\",\r\n    \"id\": \"sbroolo\",\r\n    \"price\": 15,\r\n    \"probabilities\": {\r\n        \"legendaryProbability\": 0.05,\r\n        \"epicProbability\": 0.15,\r\n        \"commonProbability\": 0.5,\r\n        \"rareProbability\": 0.3\r\n    },\r\n    \"items\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pool Create Invalid Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 400 for invalid fields\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Invalid fields.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Spool Pool\",\r\n    \"id\": \"sbroolo\",\r\n    \"price\": -14,\r\n    \"probabilities\": {\r\n        \"legendaryProbability\": 2.05,\r\n        \"epicProbability\": 0.15,\r\n        \"commonProbability\": 0.5,\r\n        \"rareProbability\": 0.3\r\n    },\r\n    \"items\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pool Create Invalid Probabilities (sum greater)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 416 for invalid probabilities sum\", function() {\r",
									"    pm.response.to.have.status(416);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Sum of probabilities is not 1.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Spool Pool\",\r\n    \"id\": \"sbroolo\",\r\n    \"price\": 10000,\r\n    \"probabilities\": {\r\n        \"legendaryProbability\":1,\r\n        \"epicProbability\": 0.18,\r\n        \"commonProbability\": 0.5,\r\n        \"rareProbability\": 0.3\r\n    },\r\n    \"items\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pool Create Not logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 when not logged in\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Spool Pool\",\r\n    \"id\": \"sbrool2323o\",\r\n    \"price\": 10000,\r\n    \"probabilities\": {\r\n        \"legendaryProbability\":1,\r\n        \"epicProbability\": 0.18,\r\n        \"commonProbability\": 0.5,\r\n        \"rareProbability\": 0.3\r\n    },\r\n    \"items\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/create",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Profiles Success\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    if(response.length > 0) {\r",
									"        pm.expect(response[0]).to.have.all.keys('id', 'email', 'username', 'currency', 'pvp_score', 'joindate', 'role');\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/list?page_number=1",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"list"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles not Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 when user is not admin\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/list?page_number=1",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"list"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles not logged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 when user is not admin\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "session",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/list?page_number=1",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"list"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Debug Request\", () => {\r",
									"    console.log(\"Full URL:\", pm.request.url.toString());\r",
									"    console.log(\"User UUID used:\", pm.variables.get('user_uuid'));\r",
									"    console.log(\"Session ID used:\", pm.variables.get('session_id'));\r",
									"});\r",
									"\r",
									"pm.test(\"Get History Success\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "session={{session_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "history_type",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{transactions_profile_uuid}}/history?history_type=ingame",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{transactions_profile_uuid}}",
								"history"
							],
							"query": [
								{
									"key": "history_type",
									"value": "bundle",
									"disabled": true
								},
								{
									"key": "history_type",
									"value": "ingame"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User History not Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 when user is not admin\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "session={{session_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "history_type",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{transactions_profile_uuid}}/history?history_type=ingame",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{transactions_profile_uuid}}",
								"history"
							],
							"query": [
								{
									"key": "history_type",
									"value": "bundle",
									"disabled": true
								},
								{
									"key": "history_type",
									"value": "ingame"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User History profile not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404 when user not found\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"User not found.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "session={{session_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "history_type",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{auction_uuid}}/history?history_type=ingame",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{auction_uuid}}",
								"history"
							],
							"query": [
								{
									"key": "history_type",
									"value": "bundle",
									"disabled": true
								},
								{
									"key": "history_type",
									"value": "ingame"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User History invalid history type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 400 when type not valid\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "session={{session_id}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "history_type",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{transactions_profile_uuid}}}/history?history_type=invalid",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{transactions_profile_uuid}}}",
								"history"
							],
							"query": [
								{
									"key": "history_type",
									"value": "bundle",
									"disabled": true
								},
								{
									"key": "history_type",
									"value": "invalid"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Feedbacks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 200 and list of feedbacks\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    if(responseData.length > 0) {\r",
									"        pm.expect(responseData[0]).to.have.property('id');\r",
									"        pm.expect(responseData[0]).to.have.property('user_uuid');\r",
									"        pm.expect(responseData[0]).to.have.property('timestamp');\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/feedback/list?page_number=2",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"feedback",
								"list"
							],
							"query": [
								{
									"key": "page_number",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Feedbacks unauthorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script\r",
									"pm.test(\"Should return 403 when user is not admin\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/feedback/list?page_number=2",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"feedback",
								"list"
							],
							"query": [
								{
									"key": "page_number",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script\r",
									"pm.test(\"Should return 200 for successful profile edit\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Profile updated successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{uuid_to_ban}}/edit?email=jotaro1232111111@joestar.com&username=ciaoone11&user_uuid=e3b0c442-98fc-1c14-b39f-92d1282048c0",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{uuid_to_ban}}",
								"edit"
							],
							"query": [
								{
									"key": "email",
									"value": "jotaro1232111111@joestar.com"
								},
								{
									"key": "username",
									"value": "ciaoone11"
								},
								{
									"key": "user_uuid",
									"value": "e3b0c442-98fc-1c14-b39f-92d1282048c0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit profile Not logged",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 when not logged in\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{uuid_to_ban}}/edit?email=jotaro@joestar.com&username=ciaone11&user_uuid=e3b0c442-98fc-1c14-b39f-92d1282048c0",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{uuid_to_ban}}",
								"edit"
							],
							"query": [
								{
									"key": "email",
									"value": "jotaro@joestar.com"
								},
								{
									"key": "username",
									"value": "ciaone11"
								},
								{
									"key": "user_uuid",
									"value": "e3b0c442-98fc-1c14-b39f-92d1282048c0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit profile user not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404 when user not found\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"User not found.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{auction_uuid}}/edit?email=jotaro@joestar.com&username=ciaone11&user_uuid=e3b0o442-98fc-1c14-b39f-92d1282048c0",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{auction_uuid}}",
								"edit"
							],
							"query": [
								{
									"key": "email",
									"value": "jotaro@joestar.com"
								},
								{
									"key": "username",
									"value": "ciaone11"
								},
								{
									"key": "user_uuid",
									"value": "e3b0o442-98fc-1c14-b39f-92d1282048c0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit profile user invalid field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 203 for partial update\", function() {\r",
									"    pm.response.to.have.status(203);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"No changes to profile applied.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/profile/{{uuid_to_ban}}/edit?username=ciaone11&email=jotaro@joestar.com",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"profile",
								"{{uuid_to_ban}}",
								"edit"
							],
							"query": [
								{
									"key": "username",
									"value": "ciaone11"
								},
								{
									"key": "user_uuid",
									"value": "e3b0c442-98fc-1c14-b39f-92d1282048c0",
									"disabled": true
								},
								{
									"key": "email",
									"value": "jotaro@joestar.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Auction Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"auction_uuid\": \"{{auction_to_bid_to_uuid}}\",\r\n    \"current_bid\": 5,\r\n    \"current_bidder\": \"{{user_uuid}}\",\r\n    \"end_time\": \"2025-12-31T23:59:58Z\",\r\n    \"inventory_item_id\": \"e6d5c4b3-a291-8076-5432-109876fedcba\",\r\n    \"starting_price\": 1,\r\n    \"status\": \"open\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/auctions/{{auction_to_bid_to_uuid}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"auctions",
								"{{auction_to_bid_to_uuid}}",
								"update"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Auction Update Invalid price (lower than starting price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 401 for invalid price validation\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Current bid cannot be lower than starting price.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"auction_uuid\": \"aabbccdd-eeff-0011-2233-445566778899\",\r\n    \"status\": \"open\",\r\n    \"inventory_item_owner_id\": \"e3b0c442-98fc-1c14-b39f-92d1282048c0\",\r\n    \"inventory_item_id\": \"f7e6d5c4-b3a2-9180-7654-321098fedcba\",\r\n    \"starting_price\": 5000,\r\n    \"current_bid\": 4000,  // Current bid lower than starting price\r\n    \"current_bidder\": \"87f3b5d1-5e8e-4fa4-909b-3cd29f4b1f09\",\r\n    \"end_time\": \"2024-02-01T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/auctions/{{auction_to_bid_to_uuid}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"auctions",
								"{{auction_to_bid_to_uuid}}",
								"update"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Auction Update Invalid price (Invalid range)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 416 for invalid price validation\", function() {\r",
									"    pm.response.to.have.status(416);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Current bid cannot be lower than 0.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"auction_uuid\": \"aabbccdd-eeff-0011-2233-445566778899\",\r\n    \"status\": \"open\",\r\n    \"inventory_item_owner_id\": \"e3b0c442-98fc-1c14-b39f-92d1282048c0\",\r\n    \"inventory_item_id\": \"f7e6d5c4-b3a2-9180-7654-321098fedcba\",\r\n    \"starting_price\": 5000,\r\n    \"current_bid\": -1,  //\r\n    \"current_bidder\": \"87f3b5d1-5e8e-4fa4-909b-3cd29f4b1f09\",\r\n    \"end_time\": \"2024-02-01T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/auctions/{{auction_to_bid_to_uuid}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"auctions",
								"{{auction_to_bid_to_uuid}}",
								"update"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Auction Update Invalid price (Invalid starting price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 412 for invalid price validation\", function() {\r",
									"    pm.response.to.have.status(412);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Starting price cannot be lower or equal to 0.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"auction_uuid\": \"aabbccdd-eeff-0011-2233-445566778899\",\r\n    \"status\": \"open\",\r\n    \"inventory_item_owner_id\": \"e3b0c442-98fc-1c14-b39f-92d1282048c0\",\r\n    \"inventory_item_id\": \"f7e6d5c4-b3a2-9180-7654-321098fedcba\",\r\n    \"starting_price\":0,\r\n    \"current_bid\": 1,  //\r\n    \"current_bidder\": \"87f3b5d1-5e8e-4fa4-909b-3cd29f4b1f09\",\r\n    \"end_time\": \"2024-02-01T00:00:00Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/auctions/{{auction_to_bid_to_uuid}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"auctions",
								"{{auction_to_bid_to_uuid}}",
								"update"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Auction Update Unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 when user is not admin\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"This account is not authorized to perform this action\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pre-request Script\r",
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"JosukeHigashikata\",\r",
									"            \"password\": \"crazy_diamond\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"auction_uuid\": \"{{auction_to_bid_to_uuid}}\",\r\n    \"current_bid\": 5,\r\n    \"current_bidder\": \"{{user_uuid}}\",\r\n    \"end_time\": \"2025-12-31T23:59:58Z\",\r\n    \"inventory_item_id\": \"e6d5c4b3-a291-8076-5432-109876fedcba\",\r\n    \"starting_price\": 1,\r\n    \"status\": \"open\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/auctions/{{auction_to_bid_to_uuid}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"auctions",
								"{{auction_to_bid_to_uuid}}",
								"update"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Info Feedback",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/feedback/2",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"feedback",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Gacha",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"gacha_uuid\": \"{{gacha_uuid}}\",\r\n  \"name\": \"Tower of Gray\",\r\n  \"rarity\": \"legendary\",\r\n  \"attributes\": {\r\n    \"power\": \"E\",\r\n    \"speed\": \"A\",\r\n    \"durability\": \"E\",\r\n    \"precision\": \"E\",\r\n    \"range\": \"E\",\r\n    \"potential\": \"E\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/gacha/{{gacha_uuid}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"gacha",
								"{{gacha_uuid}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{pool_id}}\",\r\n  \"name\": \"Starter Pool 2\",\r\n  \"price\": 50,\r\n  \"probabilities\": {\r\n    \"commonProbability\": 0.5,\r\n    \"rareProbability\": 0.3,\r\n    \"epicProbability\": 0.15,\r\n    \"legendaryProbability\": 0.05\r\n  },\r\n  \"items\": [\r\n    \"1b2f7b4e-5e1f-4112-a7c5-b7559dbb8c76\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/{{pool_id}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"{{pool_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pool Invalid fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Script\r",
									"pm.test(\"Should return 400 for invalid fields\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Invalid request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"id\": \"pool_pucci\",\r\n    \"invalid_field\": \"value\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/{{pool_id}}/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"{{pool_id}}",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pool with unknown pool",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404 when pool not found\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"No changes were applied.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"non_existent_pool\",\r\n    \"name\": \"Test Pool\",\r\n    \"price\": 1000,\r\n    \"probabilities\": {\r\n        \"legendaryProbability\": 0.05,\r\n        \"epicProbability\": 0.15,\r\n        \"rareProbability\": 0.30,\r\n        \"commonProbability\": 0.50\r\n    },\r\n    \"items\": [\r\n        \"1b2f7b4e-5e1f-4112-a7c5-b7559dbb8c76\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/non_existent_pool/update",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"non_existent_pool",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Pool",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl_admin}}/admin/pool/{{pool_to_delete}}/delete",
							"host": [
								"{{baseUrl_admin}}"
							],
							"path": [
								"admin",
								"pool",
								"{{pool_to_delete}}",
								"delete"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auctions Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auctions/health_check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auctions",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createAuction = async (startingPrice, itemOwnerId, itemId) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/create?starting_price=${startingPrice}&inventory_item_owner_id=${itemOwnerId}&inventory_item_id=${itemId}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{session_id}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auctions/create?starting_price=10&inventory_item_owner_id={{user_uuid}}&inventory_item_id={{SpeedWagon_item#3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auctions",
								"create"
							],
							"query": [
								{
									"key": "starting_price",
									"value": "10"
								},
								{
									"key": "inventory_item_owner_id",
									"value": "{{user_uuid}}"
								},
								{
									"key": "inventory_item_id",
									"value": "{{SpeedWagon_item#3}}"
								},
								{
									"key": "Cookie",
									"value": "{{session_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Bid on Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const bidOnAuction = async (auctionUuid, bidAmount) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/bid/${auctionUuid}?bid=${bidAmount}`, {\r",
									"            method: 'POST',\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auctions/bid/{{auction_to_bid_to_uuid}}?bid=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auctions",
								"bid",
								"{{auction_to_bid_to_uuid}}"
							],
							"query": [
								{
									"key": "bid",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auction Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get Auction Status\r",
									"const getAuctionStatus = async (auctionUuid) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/status/${auctionUuid}`, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auctions/status/{{auction_to_bid_to_uuid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auctions",
								"status",
								"{{auction_to_bid_to_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auctions History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAuctionsHistory = async (pageNumber = 1) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}/history?page_number=${pageNumber}`, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auctions/history?page_number=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auctions",
								"history"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Auctions List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getAuctionsList = async (status = 'active', rarity = null, pageNumber = 1) => {\r",
									"    try {\r",
									"        let url = `${baseUrl}/list?status=${status}&page_number=${pageNumber}`;\r",
									"        if (rarity) url += `&rarity=${rarity}`;\r",
									"        \r",
									"        const response = await fetch(url, {\r",
									"            credentials: 'include'\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auctions/list?page_number=1&rarity=legendary&status=open",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auctions",
								"list"
							],
							"query": [
								{
									"key": "status",
									"value": "closed",
									"disabled": true
								},
								{
									"key": "page_number",
									"value": "1"
								},
								{
									"key": "rarity",
									"value": "legendary"
								},
								{
									"key": "status",
									"value": "open"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feedback Service Tests",
			"item": [
				{
					"name": "Health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/feedback/health_check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feedback",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Feedback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const postFeedback = async (feedbackContent) => {\r",
									"    try {\r",
									"        const response = await fetch('http://localhost/feedback/', {\r",
									"            method: 'POST',\r",
									"            headers: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            credentials: 'include', // Necessary for sending cookies\r",
									"            body: JSON.stringify({\r",
									"                string: feedbackContent\r",
									"            })\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Error posting feedback:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"string\": \"' DROP TABLE users;\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost/feedback/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"feedback",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Feedback with invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid input returns 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Invalid request.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"string\": \"\"  // Empty string\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost/feedback/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"feedback",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Feedback without login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 403 for unauthorized access\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"    pm.expect(pm.response.json()).to.have.property(\"error\", \"Not logged in.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"string\": \"' DROP TABLE users;\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost/feedback/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"feedback",
								""
							]
						}
					},
					"response": []
				}
			],
			"description": "puppa christian"
		},
		{
			"name": "Gacha Service Tests",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const healthCheck = async () => {\r",
									"    try {\r",
									"        const response = await fetch('http://localhost/gacha/health_check', {\r",
									"            method: 'GET',\r",
									"            headers: {\r",
									"                'Content-Type': 'application/json'\r",
									"            }\r",
									"        });\r",
									"        \r",
									"        // Assertions\r",
									"        expect(response.status).toBe(200);\r",
									"        const data = await response.json();\r",
									"        expect(data.message).toBe(\"Service operational.\");\r",
									"        \r",
									"        return data;\r",
									"    } catch (error) {\r",
									"        console.error('Health check error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/feedback/health_check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feedback",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gacha Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"var response = pm.response.json();\r",
									"\r",
									"// Helper function to validate UUID format\r",
									"function isValidUUID(uuid) {\r",
									"    var regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r",
									"    return regex.test(uuid);\r",
									"}\r",
									"\r",
									"// Test that the response has all required top-level properties\r",
									"pm.test(\"Response has all required properties\", function () {\r",
									"    pm.expect(response).to.have.property('gacha_uuid');\r",
									"    pm.expect(response).to.have.property('name');\r",
									"    pm.expect(response).to.have.property('rarity');\r",
									"    pm.expect(response).to.have.property('attributes');\r",
									"});\r",
									"\r",
									"// Test that 'gacha_uuid' is a valid UUID\r",
									"pm.test(\"'gacha_uuid' is a valid UUID\", function () {\r",
									"    pm.expect(response.gacha_uuid).to.be.a('string');\r",
									"    pm.expect(isValidUUID(response.gacha_uuid)).to.be.true;\r",
									"});\r",
									"\r",
									"// Test that 'name' is a non-empty string\r",
									"pm.test(\"'name' is a non-empty string\", function () {\r",
									"    pm.expect(response.name).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test that 'rarity' is a non-empty string\r",
									"pm.test(\"'rarity' is a non-empty string\", function () {\r",
									"    pm.expect(response.rarity).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test that 'attributes' is an object with required properties\r",
									"pm.test(\"'attributes' has all required properties\", function () {\r",
									"    pm.expect(response.attributes).to.be.an('object');\r",
									"\r",
									"    var requiredAttributes = ['power', 'speed', 'durability', 'precision', 'range', 'potential'];\r",
									"    requiredAttributes.forEach(function(attr) {\r",
									"        pm.expect(response.attributes).to.have.property(attr);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test that each attribute value is a non-empty string\r",
									"pm.test(\"All attribute values are non-empty strings\", function () {\r",
									"    Object.values(response.attributes).forEach(function(value) {\r",
									"        pm.expect(value).to.be.a('string').and.to.not.be.empty;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/gacha/{{gacha_uuid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"gacha",
								"{{gacha_uuid}}"
							],
							"query": [
								{
									"key": "gachauuid",
									"value": "1b2f7b4e-5e1f-4112-a7c5-b7559dbb8c76",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pull Gacha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Attributes object must contain durability, potential, power, precision, range, and speed\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.attributes).to.be.an('object');\r",
									"    pm.expect(responseData.attributes).to.include.all.keys('durability', 'potential', 'power', 'precision', 'range', 'speed');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Presence of gacha_uuid, name, and rarity in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('gacha_uuid');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('rarity');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://localhost/gacha/pull/{{pool_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"gacha",
								"pull",
								"{{pool_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pools Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"    \r",
									"    responseData.forEach(function(pool) {\r",
									"        pm.expect(pool).to.be.an('object');\r",
									"        pm.expect(pool).to.have.property('id');\r",
									"        pm.expect(pool).to.have.property('items');\r",
									"        pm.expect(pool).to.have.property('name');\r",
									"        pm.expect(pool).to.have.property('probabilities');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Attributes within items have the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(pool => {\r",
									"        pm.expect(pool.items).to.be.an('array');\r",
									"        pool.items.forEach(item => {\r",
									"            pm.expect(item.attributes).to.be.an('object');\r",
									"            pm.expect(item.attributes.durability).to.exist;\r",
									"            pm.expect(item.attributes.potential).to.exist;\r",
									"            pm.expect(item.attributes.power).to.exist;\r",
									"            pm.expect(item.attributes.precision).to.exist;\r",
									"            pm.expect(item.attributes.range).to.exist;\r",
									"            pm.expect(item.attributes.speed).to.exist;\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost/gacha/pools",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"gacha",
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gachas list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('attributes');\r",
									"        pm.expect(item).to.have.property('gacha_uuid');\r",
									"        pm.expect(item).to.have.property('name');\r",
									"        pm.expect(item).to.have.property('rarity');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All attributes are present and not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(item) {\r",
									"    pm.expect(item.attributes).to.exist.and.to.be.an('object');\r",
									"    pm.expect(item.attributes.durability).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.potential).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.power).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.precision).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.range).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"    pm.expect(item.attributes.speed).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Rarity is a valid and not empty value\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('rarity').that.is.not.empty;\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost/gacha/list?not_owned=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"gacha",
								"list"
							],
							"query": [
								{
									"key": "not_owned",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Inventory Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost/inventory/health_check",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const getInventory = async (pageNumber = 1) => {\r",
									"    try {\r",
									"        const response = await fetch(`${baseUrl}?page_number=${pageNumber}`, {\r",
									"            method: 'GET',\r",
									"            headers: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            credentials: 'include' // For sending cookies\r",
									"        });\r",
									"        return await response.json();\r",
									"    } catch (error) {\r",
									"        console.error('Get inventory error:', error);\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost/inventory?page_number=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory"
							],
							"query": [
								{
									"key": "page_number",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Inventory Item info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica che lo stato della risposta sia 200 OK\r",
									"pm.test(\"La risposta ha lo stato 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verifica che il contenuto della risposta sia in formato JSON\r",
									"pm.test(\"Il contenuto della risposta è JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Ottieni il corpo della risposta\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Verifica che l'oggetto abbia tutte le proprietà richieste\r",
									"pm.test(\"L'oggetto ha il formato corretto\", function() {\r",
									"    pm.expect(responseData).to.have.property(\"owner_id\");\r",
									"    pm.expect(responseData).to.have.property(\"item_id\");\r",
									"    pm.expect(responseData).to.have.property(\"gacha_uuid\");\r",
									"    pm.expect(responseData).to.have.property(\"obtained_date\");\r",
									"    pm.expect(responseData).to.have.property(\"owners_no\");\r",
									"    pm.expect(responseData).to.have.property(\"price_paid\");\r",
									"    pm.expect(responseData).to.have.property(\"pull_date\");\r",
									"});\r",
									"\r",
									"// Verifica i tipi di dato\r",
									"pm.test(\"I tipi di dato sono corretti\", function() {\r",
									"    pm.expect(responseData.owner_id).to.be.a(\"string\");\r",
									"    pm.expect(responseData.item_id).to.be.a(\"string\");\r",
									"    pm.expect(responseData.gacha_uuid).to.be.a(\"string\");\r",
									"    pm.expect(responseData.owners_no).to.be.a(\"number\");\r",
									"    pm.expect(responseData.price_paid).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost/inventory/{{item_uuid}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"inventory",
								"{{item_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/inventory/?inventory_item_owner_id={{user_uuid}}&inventory_item_id={{SpeedWagon_item#3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								""
							],
							"query": [
								{
									"key": "inventory_item_owner_id",
									"value": "{{user_uuid}}"
								},
								{
									"key": "inventory_item_id",
									"value": "{{SpeedWagon_item#3}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile Service Tests",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/profile/health_check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile",
								"health_check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edit Profile Status Code Tests\", function () {\r",
									"    // Test response code\r",
									"    if (pm.response.code === 304) {\r",
									"        pm.expect(pm.response.code).to.equal(304);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"message\", \"No changes needed\");\r",
									"    } else if (pm.response.code === 200) {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"message\", \"Profile updated successfully\");\r",
									"    } else if (pm.response.code === 404) {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"User not found\");\r",
									"    } else if (pm.response.code === 403) {\r",
									"        pm.expect(pm.response.code).to.equal(403);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Not logged in\");\r",
									"    } else if (pm.response.code === 400) {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Invalid fields\");\r",
									"    } else if (pm.response.code === 500) {\r",
									"        pm.expect(pm.response.code).to.equal(500);\r",
									"        pm.expect(pm.response.json()).to.have.property(\"error\", \"Error updating profile\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test response headers\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test response structure\r",
									"pm.test(\"Response structure is correct\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    if (pm.response.code === 200 || pm.response.code === 304) {\r",
									"        pm.expect(responseJson).to.have.property(\"message\");\r",
									"        pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    } else {\r",
									"        pm.expect(responseJson).to.have.property(\"error\");\r",
									"        pm.expect(responseJson.error).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is acceptable\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"new123.email@example.com\",\r\n    \"username\": \"newUsername123\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/profile/edit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile",
								"edit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - email, id, joindate, and username\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.include.all.keys('email', 'id', 'joindate', 'username');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Joindate is in a valid date format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.joindate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/profile/{{user_uuid}}/info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile",
								"{{user_uuid}}",
								"info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required field - error\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.error).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"new.email@example.com\",\r\n    \"username\": \"newUsername123\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/profile/delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency Service Tests",
			"item": [
				{
					"name": "Buy bundle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const logoutRequest = {\r",
									"    url: 'http://localhost/auth/logout',\r",
									"    method: 'DELETE'\r",
									"};\r",
									"\r",
									"const loginAsUserRequest = {\r",
									"    url: 'http://localhost/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"SpeedwagonAdmin\",\r",
									"            \"password\": \"admin_foundation\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"pm.sendRequest(logoutRequest)\r",
									"    .then(() => {\r",
									"        return pm.sendRequest(loginAsUserRequest);\r",
									"    })\r",
									"    .catch(err => {\r",
									"        console.error('Error in request chain:', err);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/currency/buy/bundle_arrow",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"currency",
								"buy",
								"bundle_arrow"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Bundles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/currency/bundles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"currency",
								"bundles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/currency/health_check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"currency",
								"health_check"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}