from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceBidRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_uuid=None, auction_uuid=None, new_bid=None):  # noqa: E501
        """PlaceBidRequest - a model defined in OpenAPI

        :param user_uuid: The user_uuid of this PlaceBidRequest.  # noqa: E501
        :type user_uuid: str
        :param auction_uuid: The auction_uuid of this PlaceBidRequest.  # noqa: E501
        :type auction_uuid: str
        :param new_bid: The new_bid of this PlaceBidRequest.  # noqa: E501
        :type new_bid: int
        """
        self.openapi_types = {
            'user_uuid': str,
            'auction_uuid': str,
            'new_bid': int
        }

        self.attribute_map = {
            'user_uuid': 'user_uuid',
            'auction_uuid': 'auction_uuid',
            'new_bid': 'new_bid'
        }

        self._user_uuid = user_uuid
        self._auction_uuid = auction_uuid
        self._new_bid = new_bid

    @classmethod
    def from_dict(cls, dikt) -> 'PlaceBidRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The place_bid_request of this PlaceBidRequest.  # noqa: E501
        :rtype: PlaceBidRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_uuid(self) -> str:
        """Gets the user_uuid of this PlaceBidRequest.

        UUID of user.  # noqa: E501

        :return: The user_uuid of this PlaceBidRequest.
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid: str):
        """Sets the user_uuid of this PlaceBidRequest.

        UUID of user.  # noqa: E501

        :param user_uuid: The user_uuid of this PlaceBidRequest.
        :type user_uuid: str
        """

        self._user_uuid = user_uuid

    @property
    def auction_uuid(self) -> str:
        """Gets the auction_uuid of this PlaceBidRequest.

        UUID of the auction.  # noqa: E501

        :return: The auction_uuid of this PlaceBidRequest.
        :rtype: str
        """
        return self._auction_uuid

    @auction_uuid.setter
    def auction_uuid(self, auction_uuid: str):
        """Sets the auction_uuid of this PlaceBidRequest.

        UUID of the auction.  # noqa: E501

        :param auction_uuid: The auction_uuid of this PlaceBidRequest.
        :type auction_uuid: str
        """

        self._auction_uuid = auction_uuid

    @property
    def new_bid(self) -> int:
        """Gets the new_bid of this PlaceBidRequest.

        The new bid amount.  # noqa: E501

        :return: The new_bid of this PlaceBidRequest.
        :rtype: int
        """
        return self._new_bid

    @new_bid.setter
    def new_bid(self, new_bid: int):
        """Sets the new_bid of this PlaceBidRequest.

        The new bid amount.  # noqa: E501

        :param new_bid: The new_bid of this PlaceBidRequest.
        :type new_bid: int
        """
        if new_bid is not None and new_bid < 0:  # noqa: E501
            raise ValueError("Invalid value for `new_bid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._new_bid = new_bid
