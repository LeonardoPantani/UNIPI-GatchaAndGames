from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RarityProbability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_probability=0.5, rare_probability=0.3, epic_probability=0.15, legendary_probability=0.05):  # noqa: E501
        """RarityProbability - a model defined in OpenAPI

        :param common_probability: The common_probability of this RarityProbability.  # noqa: E501
        :type common_probability: float
        :param rare_probability: The rare_probability of this RarityProbability.  # noqa: E501
        :type rare_probability: float
        :param epic_probability: The epic_probability of this RarityProbability.  # noqa: E501
        :type epic_probability: float
        :param legendary_probability: The legendary_probability of this RarityProbability.  # noqa: E501
        :type legendary_probability: float
        """
        self.openapi_types = {
            'common_probability': float,
            'rare_probability': float,
            'epic_probability': float,
            'legendary_probability': float
        }

        self.attribute_map = {
            'common_probability': 'commonProbability',
            'rare_probability': 'rareProbability',
            'epic_probability': 'epicProbability',
            'legendary_probability': 'legendaryProbability'
        }

        self._common_probability = common_probability
        self._rare_probability = rare_probability
        self._epic_probability = epic_probability
        self._legendary_probability = legendary_probability

    @classmethod
    def from_dict(cls, dikt) -> 'RarityProbability':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RarityProbability of this RarityProbability.  # noqa: E501
        :rtype: RarityProbability
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_probability(self) -> float:
        """Gets the common_probability of this RarityProbability.


        :return: The common_probability of this RarityProbability.
        :rtype: float
        """
        return self._common_probability

    @common_probability.setter
    def common_probability(self, common_probability: float):
        """Sets the common_probability of this RarityProbability.


        :param common_probability: The common_probability of this RarityProbability.
        :type common_probability: float
        """

        self._common_probability = common_probability

    @property
    def rare_probability(self) -> float:
        """Gets the rare_probability of this RarityProbability.


        :return: The rare_probability of this RarityProbability.
        :rtype: float
        """
        return self._rare_probability

    @rare_probability.setter
    def rare_probability(self, rare_probability: float):
        """Sets the rare_probability of this RarityProbability.


        :param rare_probability: The rare_probability of this RarityProbability.
        :type rare_probability: float
        """

        self._rare_probability = rare_probability

    @property
    def epic_probability(self) -> float:
        """Gets the epic_probability of this RarityProbability.


        :return: The epic_probability of this RarityProbability.
        :rtype: float
        """
        return self._epic_probability

    @epic_probability.setter
    def epic_probability(self, epic_probability: float):
        """Sets the epic_probability of this RarityProbability.


        :param epic_probability: The epic_probability of this RarityProbability.
        :type epic_probability: float
        """

        self._epic_probability = epic_probability

    @property
    def legendary_probability(self) -> float:
        """Gets the legendary_probability of this RarityProbability.


        :return: The legendary_probability of this RarityProbability.
        :rtype: float
        """
        return self._legendary_probability

    @legendary_probability.setter
    def legendary_probability(self, legendary_probability: float):
        """Sets the legendary_probability of this RarityProbability.


        :param legendary_probability: The legendary_probability of this RarityProbability.
        :type legendary_probability: float
        """

        self._legendary_probability = legendary_probability
