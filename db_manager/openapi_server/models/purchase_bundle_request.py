from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class PurchaseBundleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_uuid=None, bundle_codename=None, currency_name=None, credits_obtained=None, transaction_type_bundle_code=None):  # noqa: E501
        """PurchaseBundleRequest - a model defined in OpenAPI

        :param user_uuid: The user_uuid of this PurchaseBundleRequest.  # noqa: E501
        :type user_uuid: str
        :param bundle_codename: The bundle_codename of this PurchaseBundleRequest.  # noqa: E501
        :type bundle_codename: str
        :param currency_name: The currency_name of this PurchaseBundleRequest.  # noqa: E501
        :type currency_name: str
        :param credits_obtained: The credits_obtained of this PurchaseBundleRequest.  # noqa: E501
        :type credits_obtained: int
        :param transaction_type_bundle_code: The transaction_type_bundle_code of this PurchaseBundleRequest.  # noqa: E501
        :type transaction_type_bundle_code: str
        """
        self.openapi_types = {
            'user_uuid': str,
            'bundle_codename': str,
            'currency_name': str,
            'credits_obtained': int,
            'transaction_type_bundle_code': str
        }

        self.attribute_map = {
            'user_uuid': 'user_uuid',
            'bundle_codename': 'bundle_codename',
            'currency_name': 'currency_name',
            'credits_obtained': 'credits_obtained',
            'transaction_type_bundle_code': 'transaction_type_bundle_code'
        }

        self._user_uuid = user_uuid
        self._bundle_codename = bundle_codename
        self._currency_name = currency_name
        self._credits_obtained = credits_obtained
        self._transaction_type_bundle_code = transaction_type_bundle_code

    @classmethod
    def from_dict(cls, dikt) -> 'PurchaseBundleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The purchase_bundle_request of this PurchaseBundleRequest.  # noqa: E501
        :rtype: PurchaseBundleRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_uuid(self) -> str:
        """Gets the user_uuid of this PurchaseBundleRequest.

        UUID of user.  # noqa: E501

        :return: The user_uuid of this PurchaseBundleRequest.
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid: str):
        """Sets the user_uuid of this PurchaseBundleRequest.

        UUID of user.  # noqa: E501

        :param user_uuid: The user_uuid of this PurchaseBundleRequest.
        :type user_uuid: str
        """

        self._user_uuid = user_uuid

    @property
    def bundle_codename(self) -> str:
        """Gets the bundle_codename of this PurchaseBundleRequest.

        Internal code-name for the bundle.  # noqa: E501

        :return: The bundle_codename of this PurchaseBundleRequest.
        :rtype: str
        """
        return self._bundle_codename

    @bundle_codename.setter
    def bundle_codename(self, bundle_codename: str):
        """Sets the bundle_codename of this PurchaseBundleRequest.

        Internal code-name for the bundle.  # noqa: E501

        :param bundle_codename: The bundle_codename of this PurchaseBundleRequest.
        :type bundle_codename: str
        """
        if bundle_codename is not None and not re.search(r'^[a-zA-Z0-9_]+$', bundle_codename):  # noqa: E501
            raise ValueError("Invalid value for `bundle_codename`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._bundle_codename = bundle_codename

    @property
    def currency_name(self) -> str:
        """Gets the currency_name of this PurchaseBundleRequest.

        Currency code-name  # noqa: E501

        :return: The currency_name of this PurchaseBundleRequest.
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name: str):
        """Sets the currency_name of this PurchaseBundleRequest.

        Currency code-name  # noqa: E501

        :param currency_name: The currency_name of this PurchaseBundleRequest.
        :type currency_name: str
        """
        if currency_name is not None and not re.search(r'^[A-Z]{3}$', currency_name):  # noqa: E501
            raise ValueError("Invalid value for `currency_name`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")  # noqa: E501

        self._currency_name = currency_name

    @property
    def credits_obtained(self) -> int:
        """Gets the credits_obtained of this PurchaseBundleRequest.


        :return: The credits_obtained of this PurchaseBundleRequest.
        :rtype: int
        """
        return self._credits_obtained

    @credits_obtained.setter
    def credits_obtained(self, credits_obtained: int):
        """Sets the credits_obtained of this PurchaseBundleRequest.


        :param credits_obtained: The credits_obtained of this PurchaseBundleRequest.
        :type credits_obtained: int
        """

        self._credits_obtained = credits_obtained

    @property
    def transaction_type_bundle_code(self) -> str:
        """Gets the transaction_type_bundle_code of this PurchaseBundleRequest.


        :return: The transaction_type_bundle_code of this PurchaseBundleRequest.
        :rtype: str
        """
        return self._transaction_type_bundle_code

    @transaction_type_bundle_code.setter
    def transaction_type_bundle_code(self, transaction_type_bundle_code: str):
        """Sets the transaction_type_bundle_code of this PurchaseBundleRequest.


        :param transaction_type_bundle_code: The transaction_type_bundle_code of this PurchaseBundleRequest.
        :type transaction_type_bundle_code: str
        """

        self._transaction_type_bundle_code = transaction_type_bundle_code
