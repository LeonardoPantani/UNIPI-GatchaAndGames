from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.match_pairing_player1 import MatchPairingPlayer1
from openapi_server.models.match_pairing_player2 import MatchPairingPlayer2
import re
from openapi_server import util

from openapi_server.models.match_pairing_player1 import MatchPairingPlayer1  # noqa: E501
from openapi_server.models.match_pairing_player2 import MatchPairingPlayer2  # noqa: E501
import re  # noqa: E501

class MatchPairing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pair=None, extracted_stat=None, player1=None, player2=None):  # noqa: E501
        """MatchPairing - a model defined in OpenAPI

        :param pair: The pair of this MatchPairing.  # noqa: E501
        :type pair: str
        :param extracted_stat: The extracted_stat of this MatchPairing.  # noqa: E501
        :type extracted_stat: str
        :param player1: The player1 of this MatchPairing.  # noqa: E501
        :type player1: MatchPairingPlayer1
        :param player2: The player2 of this MatchPairing.  # noqa: E501
        :type player2: MatchPairingPlayer2
        """
        self.openapi_types = {
            'pair': str,
            'extracted_stat': str,
            'player1': MatchPairingPlayer1,
            'player2': MatchPairingPlayer2
        }

        self.attribute_map = {
            'pair': 'pair',
            'extracted_stat': 'extracted_stat',
            'player1': 'player1',
            'player2': 'player2'
        }

        self._pair = pair
        self._extracted_stat = extracted_stat
        self._player1 = player1
        self._player2 = player2

    @classmethod
    def from_dict(cls, dikt) -> 'MatchPairing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MatchPairing of this MatchPairing.  # noqa: E501
        :rtype: MatchPairing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pair(self) -> str:
        """Gets the pair of this MatchPairing.


        :return: The pair of this MatchPairing.
        :rtype: str
        """
        return self._pair

    @pair.setter
    def pair(self, pair: str):
        """Sets the pair of this MatchPairing.


        :param pair: The pair of this MatchPairing.
        :type pair: str
        """

        self._pair = pair

    @property
    def extracted_stat(self) -> str:
        """Gets the extracted_stat of this MatchPairing.

        Stat of a gacha.  # noqa: E501

        :return: The extracted_stat of this MatchPairing.
        :rtype: str
        """
        return self._extracted_stat

    @extracted_stat.setter
    def extracted_stat(self, extracted_stat: str):
        """Sets the extracted_stat of this MatchPairing.

        Stat of a gacha.  # noqa: E501

        :param extracted_stat: The extracted_stat of this MatchPairing.
        :type extracted_stat: str
        """
        if extracted_stat is not None and not re.search(r'^[A-Ea-e]$', extracted_stat):  # noqa: E501
            raise ValueError("Invalid value for `extracted_stat`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._extracted_stat = extracted_stat

    @property
    def player1(self) -> MatchPairingPlayer1:
        """Gets the player1 of this MatchPairing.


        :return: The player1 of this MatchPairing.
        :rtype: MatchPairingPlayer1
        """
        return self._player1

    @player1.setter
    def player1(self, player1: MatchPairingPlayer1):
        """Sets the player1 of this MatchPairing.


        :param player1: The player1 of this MatchPairing.
        :type player1: MatchPairingPlayer1
        """

        self._player1 = player1

    @property
    def player2(self) -> MatchPairingPlayer2:
        """Gets the player2 of this MatchPairing.


        :return: The player2 of this MatchPairing.
        :rtype: MatchPairingPlayer2
        """
        return self._player2

    @player2.setter
    def player2(self, player2: MatchPairingPlayer2):
        """Sets the player2 of this MatchPairing.


        :param player2: The player2 of this MatchPairing.
        :type player2: MatchPairingPlayer2
        """

        self._player2 = player2
