from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.currency_item import CurrencyItem
import re
from openapi_server import util

from openapi_server.models.currency_item import CurrencyItem  # noqa: E501
import re  # noqa: E501

class Bundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, amount=None, prices=None):  # noqa: E501
        """Bundle - a model defined in OpenAPI

        :param id: The id of this Bundle.  # noqa: E501
        :type id: str
        :param name: The name of this Bundle.  # noqa: E501
        :type name: str
        :param amount: The amount of this Bundle.  # noqa: E501
        :type amount: int
        :param prices: The prices of this Bundle.  # noqa: E501
        :type prices: CurrencyItem
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'amount': int,
            'prices': CurrencyItem
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'amount': 'amount',
            'prices': 'prices'
        }

        self._id = id
        self._name = name
        self._amount = amount
        self._prices = prices

    @classmethod
    def from_dict(cls, dikt) -> 'Bundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bundle of this Bundle.  # noqa: E501
        :rtype: Bundle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Bundle.

        Internal code-name for the bundle.  # noqa: E501

        :return: The id of this Bundle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Bundle.

        Internal code-name for the bundle.  # noqa: E501

        :param id: The id of this Bundle.
        :type id: str
        """
        if id is not None and not re.search(r'^[a-zA-Z0-9_]+$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Bundle.

        Visible name of the bundle.  # noqa: E501

        :return: The name of this Bundle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Bundle.

        Visible name of the bundle.  # noqa: E501

        :param name: The name of this Bundle.
        :type name: str
        """

        self._name = name

    @property
    def amount(self) -> int:
        """Gets the amount of this Bundle.

        No. of credits.  # noqa: E501

        :return: The amount of this Bundle.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Bundle.

        No. of credits.  # noqa: E501

        :param amount: The amount of this Bundle.
        :type amount: int
        """

        self._amount = amount

    @property
    def prices(self) -> CurrencyItem:
        """Gets the prices of this Bundle.


        :return: The prices of this Bundle.
        :rtype: CurrencyItem
        """
        return self._prices

    @prices.setter
    def prices(self, prices: CurrencyItem):
        """Sets the prices of this Bundle.


        :param prices: The prices of this Bundle.
        :type prices: CurrencyItem
        """

        self._prices = prices
