from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class EditUserProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid=None, email=None, username=None):  # noqa: E501
        """EditUserProfileRequest - a model defined in OpenAPI

        :param uuid: The uuid of this EditUserProfileRequest.  # noqa: E501
        :type uuid: str
        :param email: The email of this EditUserProfileRequest.  # noqa: E501
        :type email: str
        :param username: The username of this EditUserProfileRequest.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'uuid': str,
            'email': str,
            'username': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'email': 'email',
            'username': 'username'
        }

        self._uuid = uuid
        self._email = email
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'EditUserProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The edit_user_profile_request of this EditUserProfileRequest.  # noqa: E501
        :rtype: EditUserProfileRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this EditUserProfileRequest.

        UUID of user.  # noqa: E501

        :return: The uuid of this EditUserProfileRequest.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this EditUserProfileRequest.

        UUID of user.  # noqa: E501

        :param uuid: The uuid of this EditUserProfileRequest.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def email(self) -> str:
        """Gets the email of this EditUserProfileRequest.

        The user's email.  # noqa: E501

        :return: The email of this EditUserProfileRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this EditUserProfileRequest.

        The user's email.  # noqa: E501

        :param email: The email of this EditUserProfileRequest.
        :type email: str
        """

        self._email = email

    @property
    def username(self) -> str:
        """Gets the username of this EditUserProfileRequest.

        The username of the user  # noqa: E501

        :return: The username of this EditUserProfileRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this EditUserProfileRequest.

        The username of the user  # noqa: E501

        :param username: The username of this EditUserProfileRequest.
        :type username: str
        """
        if username is not None and len(username) < 5:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `5`")  # noqa: E501
        if username is not None and not re.search(r'^[a-zA-Z0-9_]+$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._username = username
