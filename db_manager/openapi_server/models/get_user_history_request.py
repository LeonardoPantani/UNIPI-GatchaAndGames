from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUserHistoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_uuid=None, history_type=None, page_number=1):  # noqa: E501
        """GetUserHistoryRequest - a model defined in OpenAPI

        :param user_uuid: The user_uuid of this GetUserHistoryRequest.  # noqa: E501
        :type user_uuid: str
        :param history_type: The history_type of this GetUserHistoryRequest.  # noqa: E501
        :type history_type: str
        :param page_number: The page_number of this GetUserHistoryRequest.  # noqa: E501
        :type page_number: int
        """
        self.openapi_types = {
            'user_uuid': str,
            'history_type': str,
            'page_number': int
        }

        self.attribute_map = {
            'user_uuid': 'user_uuid',
            'history_type': 'history_type',
            'page_number': 'page_number'
        }

        self._user_uuid = user_uuid
        self._history_type = history_type
        self._page_number = page_number

    @classmethod
    def from_dict(cls, dikt) -> 'GetUserHistoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The get_user_history_request of this GetUserHistoryRequest.  # noqa: E501
        :rtype: GetUserHistoryRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_uuid(self) -> str:
        """Gets the user_uuid of this GetUserHistoryRequest.

        UUID of user.  # noqa: E501

        :return: The user_uuid of this GetUserHistoryRequest.
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid: str):
        """Sets the user_uuid of this GetUserHistoryRequest.

        UUID of user.  # noqa: E501

        :param user_uuid: The user_uuid of this GetUserHistoryRequest.
        :type user_uuid: str
        """

        self._user_uuid = user_uuid

    @property
    def history_type(self) -> str:
        """Gets the history_type of this GetUserHistoryRequest.


        :return: The history_type of this GetUserHistoryRequest.
        :rtype: str
        """
        return self._history_type

    @history_type.setter
    def history_type(self, history_type: str):
        """Sets the history_type of this GetUserHistoryRequest.


        :param history_type: The history_type of this GetUserHistoryRequest.
        :type history_type: str
        """
        allowed_values = ["bundle", "ingame"]  # noqa: E501
        if history_type not in allowed_values:
            raise ValueError(
                "Invalid value for `history_type` ({0}), must be one of {1}"
                .format(history_type, allowed_values)
            )

        self._history_type = history_type

    @property
    def page_number(self) -> int:
        """Gets the page_number of this GetUserHistoryRequest.

        Page number, when needed.  # noqa: E501

        :return: The page_number of this GetUserHistoryRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number: int):
        """Sets the page_number of this GetUserHistoryRequest.

        Page number, when needed.  # noqa: E501

        :param page_number: The page_number of this GetUserHistoryRequest.
        :type page_number: int
        """
        if page_number is not None and page_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_number = page_number
