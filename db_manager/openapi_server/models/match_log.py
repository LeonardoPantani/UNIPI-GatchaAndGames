from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.match_pairing import MatchPairing
from openapi_server import util

from openapi_server.models.match_pairing import MatchPairing  # noqa: E501

class MatchLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pairings=None):  # noqa: E501
        """MatchLog - a model defined in OpenAPI

        :param pairings: The pairings of this MatchLog.  # noqa: E501
        :type pairings: List[MatchPairing]
        """
        self.openapi_types = {
            'pairings': List[MatchPairing]
        }

        self.attribute_map = {
            'pairings': 'pairings'
        }

        self._pairings = pairings

    @classmethod
    def from_dict(cls, dikt) -> 'MatchLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MatchLog of this MatchLog.  # noqa: E501
        :rtype: MatchLog
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pairings(self) -> List[MatchPairing]:
        """Gets the pairings of this MatchLog.


        :return: The pairings of this MatchLog.
        :rtype: List[MatchPairing]
        """
        return self._pairings

    @pairings.setter
    def pairings(self, pairings: List[MatchPairing]):
        """Sets the pairings of this MatchLog.


        :param pairings: The pairings of this MatchLog.
        :type pairings: List[MatchPairing]
        """
        if pairings is not None and len(pairings) > 7:
            raise ValueError("Invalid value for `pairings`, number of items must be less than or equal to `7`")  # noqa: E501
        if pairings is not None and len(pairings) < 7:
            raise ValueError("Invalid value for `pairings`, number of items must be greater than or equal to `7`")  # noqa: E501

        self._pairings = pairings
