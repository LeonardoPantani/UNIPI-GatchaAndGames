from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.gacha_rarity import GachaRarity
from openapi_server import util

from openapi_server.models.gacha_rarity import GachaRarity  # noqa: E501

class ListAuctionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, rarity=None, page_number=None):  # noqa: E501
        """ListAuctionsRequest - a model defined in OpenAPI

        :param status: The status of this ListAuctionsRequest.  # noqa: E501
        :type status: str
        :param rarity: The rarity of this ListAuctionsRequest.  # noqa: E501
        :type rarity: GachaRarity
        :param page_number: The page_number of this ListAuctionsRequest.  # noqa: E501
        :type page_number: int
        """
        self.openapi_types = {
            'status': str,
            'rarity': GachaRarity,
            'page_number': int
        }

        self.attribute_map = {
            'status': 'status',
            'rarity': 'rarity',
            'page_number': 'page_number'
        }

        self._status = status
        self._rarity = rarity
        self._page_number = page_number

    @classmethod
    def from_dict(cls, dikt) -> 'ListAuctionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The list_auctions_request of this ListAuctionsRequest.  # noqa: E501
        :rtype: ListAuctionsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this ListAuctionsRequest.

        Filter auctions by their status, either 'open' or 'closed'.  # noqa: E501

        :return: The status of this ListAuctionsRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ListAuctionsRequest.

        Filter auctions by their status, either 'open' or 'closed'.  # noqa: E501

        :param status: The status of this ListAuctionsRequest.
        :type status: str
        """
        allowed_values = ["open", "closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def rarity(self) -> GachaRarity:
        """Gets the rarity of this ListAuctionsRequest.


        :return: The rarity of this ListAuctionsRequest.
        :rtype: GachaRarity
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity: GachaRarity):
        """Sets the rarity of this ListAuctionsRequest.


        :param rarity: The rarity of this ListAuctionsRequest.
        :type rarity: GachaRarity
        """

        self._rarity = rarity

    @property
    def page_number(self) -> int:
        """Gets the page_number of this ListAuctionsRequest.


        :return: The page_number of this ListAuctionsRequest.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number: int):
        """Sets the page_number of this ListAuctionsRequest.


        :param page_number: The page_number of this ListAuctionsRequest.
        :type page_number: int
        """
        if page_number is not None and page_number < 1:  # noqa: E501
            raise ValueError("Invalid value for `page_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page_number = page_number
