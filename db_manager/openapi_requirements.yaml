openapi: 3.0.0
info:
  contact:
    email: support@gachaandgames.it
  description: |-
    Internal API for Database Manager.

    Useful links:
    - [Project repository](https://github.com/LeonardoPantani/UNIPI-GachaAndGames)
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html#license-text
  title: Gacha System - OpenAPI 3.0
  version: 1.0.0
servers:
- description: Local server
  url: http://localhost:8080
paths:
  /db_manager/health_check:
    get:
      description: Returns 200 if service is healthy.
      operationId: health_check
      responses:
        '200':
          description: Service OK
      summary: Gives information on service status.

  ############################################
  ################### ADMIN ##################
  ############################################
  /db_manager/admin/ban_user_profile:
    post:
      tags:
        - db_manager_admin
      description: 'Bans a user from the platform. Cannot ban another ADMIN.'
      operationId: ban_user_profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Profile successfully banned.
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '409':
          description: Cannot ban a user with the ADMIN role.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.          
  /db_manager/admin/create_gacha:
    post:
      tags:
        - db_manager_admin
      description: 'Creates a gacha type.'
      operationId: create_gacha_type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
      responses:
        '201':
          description: Gacha successfully created.
        '400':
          description: Invalid request format.
        '409':
          description: The provided gacha uuid is already in use.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.          
  /db_manager/admin/delete_gacha:
    post:
      tags:
        - db_manager_admin
      description: 'Deletes a gacha type.'
      operationId: delete_gacha_type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GachaId'
      responses:
        '200':
          description: Gacha successfully deleted.
        '400':
          description: Invalid request format.
        '404':
          description: Gacha not found.
        '500':
          description: Internal server error.
  /db_manager/admin/create_pool:
    post:
      tags:
        - db_manager_admin
      description: 'Creates a gacha pool.'
      operationId: create_gacha_pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
      responses:
        '201':
          description: Gacha successfully created.
        '400':
          description: Invalid request format.
        '404':
          description: 'Item UUID not found in database: {gacha_type_uuid}'
        '409':
          description: The provided pool id is already in use.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/delete_pool:
    post:
      tags:
        - db_manager_admin
      description: 'Deletes a gacha pool.'
      operationId: delete_gacha_pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: Pool successfully created.
        '400':
          description: Invalid request format.
        '404':
          description: Pool not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/edit_user_profile:
    post:
      tags:
        - db_manager_admin
      description: 'Edits a user profile.'
      operationId: edit_user_profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  $ref: '#/components/schemas/UserId'
                email:
                  $ref: '#/components/schemas/Email'
                username:
                  $ref: '#/components/schemas/Username'
      responses:
        '200':
          description: User profile successfully updated.
        '304':
          description: No changes to profile applied.
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/get_all_feedbacks:
    post:
      tags:
        - db_manager_admin
      description: 'Gets a feedback list'
      operationId: get_feedback_list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_number:
                  $ref: '#/components/schemas/PageNumber'
      responses:
        '200':
          description: Feedback list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedbackPreview'
        '400':
          description: Invalid request format.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/get_all_profiles:
    post:
      tags:
        - db_manager_admin
      description: 'Gets a profile list'
      operationId: get_profile_list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                page_number:
                  $ref: '#/components/schemas/PageNumber'
      responses:
        '200':
          description: User profile list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid request format.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/get_feedback_info:
    post:
      tags:
        - db_manager_admin
      description: 'Returns info on a single feedback'
      operationId: get_feedback_info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                feedback_id:
                  $ref: '#/components/schemas/FeedbackId'
      responses:
        '200':
          description: Feedback info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackWithUsername'
        '400':
          description: Invalid request format.
        '404':
          description: Feedback not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/get_user_history:
    post:
      tags:
        - db_manager_admin
      description: Returns history of user's profile.
      operationId: get_user_history
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                history_type:
                  type: string
                  enum:
                    - bundle
                    - ingame
                page_number:
                  $ref: '#/components/schemas/PageNumber'
      responses:
        '200':
          description: User's history, based on history_type chosen.
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '405':
          description: Invalid history type.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/update_auction:
    post:
      tags:
        - db_manager_admin
      description: 'Updates a specific auction.'
      operationId: update_auction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
      responses:
        '200':
          description: Auction successfully updated.
        '400':
          description: Invalid request format.
        '404':
          description: Some checks on the auction update failed.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/update_gacha:
    post:
      tags:
        - db_manager_admin
      description: 'Updates a specific gacha.'
      operationId: update_gacha
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
      responses:
        '200':
          description: Gacha successfully updated.
        '400':
          description: Invalid request format.
        '404':
          description: Gacha not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/admin/update_pool:
    post:
      tags:
        - db_manager_admin
      description: 'Updates a specific pool.'
      operationId: update_pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
      responses:
        '200':
          description: Pool successfully updated.
        '400':
          description: Invalid request format.
        '404':
          description: Some checks on the pool failed.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.


  ############################################
  ################ AUCTIONS ##################
  ############################################
  /db_manager/auctions/get_auction_status:
    post:
      tags:
        - db_manager_auctions
      description: 'Returns auction data if an existing uuid is provided'
      operationId: get_auction_status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  $ref: '#/components/schemas/AuctionId'
      responses:
        '200':
          description: Auction found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auction:
                    $ref: '#/components/schemas/Auction'
        '400':
          description: Invalid request format.
        '404':
          description: Auction not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/get_item_with_owner:
    post:
      tags:
        - db_manager_auctions
      description: 'Returns inventory item details if corresponding owner and item UUIDs are provided.'
      operationId: get_item_with_owner
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid: 
                  $ref: '#/components/schemas/UserId'
                item_uuid:
                  $ref: '#/components/schemas/ItemId'
      responses:
        '200':
          description: Successful retrieval of inventory item details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  item:
                    $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Invalid request format.
        '404':
          description: Item not found for the given user UUID.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/get_currency:
    post:
      tags:
        - db_manager_auctions
      description: 'Returns the currency of a user given the user UUID.'
      operationId: get_user_currency
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Successful retrieval of user's currency.
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency:
                    type: integer
                    minimum: 0
                    description: 'Currency of the user.'
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/place_bid:        
    post:
      tags:
        - db_manager_auctions
      description: Places a bid on an auction, updates the current bid and subtracts the user's currency
      operationId: place_bid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                auction_uuid:
                  $ref: '#/components/schemas/AuctionId'
                new_bid:
                  type: integer
                  minimum: 0
                  description: 'The new bid amount.'
      responses:
        '200':
          description: Successful bid placement.
        '400':
          description: Invalid request format.
        '404':
          description: Auction or user not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/create:
    post:
      tags:
        - db_manager_auctions
      description: 'Creates a new auction by inserting the auction details into the database.'
      operationId: create_auction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                auction:
                  $ref: '#/components/schemas/Auction'
      responses:
        '201':
          description: Successful creation of a new auction.
        '400':
          description: Invalid request format.
        '409':
          description: Auction with the given UUID already exists.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/get_user_involved_auctions:
    post:
      tags:
        - db_manager_auctions
      description: 'Gets a list of all auctions the user is involved in, either as a seller or as a bidder, with pagination.'
      operationId: get_user_involved_auctions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                page_number:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: List of auctions the user is involved with.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Auction'
        '400':
          description: Invalid request format.
        '404':
          description: No auctions found for the given user.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/list:
    post:
      tags:
        - db_manager_auctions
      description: 'Returns a list of all auctions, filtered by status, rarity, and supports pagination.'
      operationId: list_auctions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - open
                    - closed
                  description: Filter auctions by their status, either 'open' or 'closed'.
                rarity:
                    $ref: '#/components/schemas/GachaRarity'
                page_number:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: List of auctions matching the filters.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuctionId'
        '400':
          description: Invalid request format.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auctions/complete_sale:
    post:
      tags:
        - db_manager_auctions
      description: 'Completes the sale of an auctioned item by transferring ownership, updating balances, and logging transactions for the buyer and the seller.'
      operationId: complete_auction_sale
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                item_uuid:
                  $ref: '#/components/schemas/ItemId'
                current_bid:
                  type: integer
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Sale successfully completed, ownership transferred, balances updated, and transactions logged.
        '400':
          description: Invalid request format.
        '404':
          description: Item or user not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.


  ############################################
  ################### AUTH ###################
  ############################################
  /db_manager/auth/login:
    post:
      tags:
        - db_manager_auth
      description: 'Returns user if correct credentials are provided.'
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  $ref: '#/components/schemas/Username' 
      responses:
        '200':
          description: Successful login with user details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    $ref: '#/components/schemas/UserId'
                  uuid_hex:
                    $ref: '#/components/schemas/UserIdHex'
                  email:
                    $ref: '#/components/schemas/Email'
                  username:
                    $ref: '#/components/schemas/Username'
                  role:
                    type: string
                    description: User's role in the system.
                  password:
                    $ref: '#/components/schemas/Password'
        '400':
          description: Invalid request format.
        '404':
          description: Invalid username.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/auth/register:
    post:
      tags:
        - db_manager_auth
      description: 'Registers a user on db.'
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  $ref: '#/components/schemas/UserId'
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  $ref: '#/components/schemas/Password'
                username:
                  $ref: '#/components/schemas/Username'
      responses:
        '201':
          description: Successful registration.
        '400':
          description: Invalid request format.
        '401':
          description: The provided username is already in use.
        '409':
          description: The provided email is already in use.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.



  ############################################
  ################# CURRENCY #################
  ############################################
  /db_manager/currency/get_bundle_info:
    post:
      tags:
        - db_manager_currency
      description: 'Returns information about a bundle given its codename.'
      operationId: get_bundle_info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bundle_id:
                  type: string
                  description: 'Codename of the bundle to retrieve.'
      responses:
        '200':
          description: Successful retrieval of bundle information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  bundle:
                    $ref: '#/components/schemas/Bundle'
        '400':
          description: Invalid request format.
        '404':
          description: Bundle not found for the given codename.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/currency/purchase_bundle:
    post:
      tags:
        - db_manager_currency
      description: 'Processes the purchase of a bundle by updating user credits and logging transactions in appropriate tables.'
      operationId: purchase_bundle
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                bundle_codename:
                  $ref: '#/components/schemas/BundleId'
                currency_name:
                  $ref: '#/components/schemas/CurrencyName'
                credits_obtained:
                  type: integer
                transaction_type_bundle_code:
                  type: string
                  example: 'bought_bundle'
      responses:
        '200':
          description: Bundle successfully purchased, user credits updated, and transactions logged.
        '400':
          description: Invalid request format.
        '404':
          description: User or bundle not found.
        '500':
          description: Internal server error.
  /db_manager/currency/list_bundles:
    post:
      tags:
        - db_manager_currency
      description: 'Returns a list of all available bundles with their details.'
      operationId: list_bundles
      responses:
        '200':
          description: List of all bundles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bundle'
        '400':
          description: Invalid request format.
        '404':
          description: No bundles found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.



  ############################################
  ################# FEEDBACK #################
  ############################################
  /db_manager/feedback/submit:
    post:
      tags:
        - db_manager_feedback
      description: 'Allows users to submit feedback, which will be stored in the feedbacks table.'
      operationId: submit_feedback
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                string:
                  type: string
                  description: 'The feedback content provided by the user.'
                  example: 'I really enjoy using this feature, but I think it could be improved by adding X.'
      responses:
        '201':
          description: Feedback successfully submitted.
        '400':
          description: Invalid request format.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.



  ############################################
  ################## GACHA ###################
  ############################################
  /db_manager/gachas/get_gacha_info:
    post:
      tags:
        - db_manager_gachas
      description: 'Returns detailed information about a specific gacha by its UUID.'
      operationId: get_gacha_info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gacha_uuid:
                  $ref: '#/components/schemas/GachaId'
              required:
                - gacha_uuid
      responses:
        '200':
          description: Detailed information about the specified gacha.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gacha'
        '400':
          description: Invalid request format.
        '404':
          description: Gacha not found for the given UUID.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/gachas/get_pool_info:
    post:
      tags:
        - db_manager_gachas
      description: 'Returns detailed information about a specific gacha pool by its codename'
      operationId: get_pool_info
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: Detailed information about the requested pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'   
        '400':
          description: Invalid request format.
        '404':
          description: Pool not found for the given codename.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/gachas/get_currency:
    post:
      tags:
        - db_manager_gacha
      description: 'Returns the currency of a user given the user UUID.'
      operationId: get_currency
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Successful retrieval of user's currency.
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency:
                    type: integer
                    description: 'Currency of the user.'
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open. 
  /db_manager/gachas/give_item:
    post:
      tags:
        - db_manager_gachas
      description: Inserts the given item into user's inventory
      operationId: give_item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                item_uuid:
                  $ref: '#/components/schemas/ItemId'
                owner_uuid:
                  $ref: '#/components/schemas/UserId'
                stand_uuid:
                  $ref: '#/components/schemas/GachaId'
                price_paid:
                  type: integer
                  description: 'Currency spent to obtain the item.'
      responses:
        '201':
          description: Item correctly inserted.
        '400':
          description: Invalid request format.
        '404':
          description: User or Gacha type not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open. 
  /db_manager/gachas/get_gacha_list:
    post:
      tags:
        - db_manager_gachas
      description: Inserts the given item into user's inventory
      operationId: get_gacha_list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                owned_filter:
                  type: boolean
                  description: 'Filters item list based on user ownership.'
      responses:
        '200':
          description: Detailed information about the requested pool.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gacha'
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/gachas/get_pools:
    post:
      tags:
          - db_manager_gachas
      description: "Inserts the given item into user's inventory"
      operationId: get_pools_list
      responses:
        "200":
          description: Detailed information about all the pools.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
        "400":
          description: Invalid request format.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
        "503":
          description: Circuit breaker open.



  ############################################
  ################ INVENTORY #################
  ############################################
  /db_manager/inventory/get_user_inventory_items:
    post:
      tags:
        - db_manager_inventory
      description: 'Returns the inventory items of a specific user by user UUID, paginated.'
      operationId: get_user_inventory_items
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                page_number:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Paginated list of inventory items for the given user.
          content:
            application/json:
              schema:
                type: array
                description: 'List of inventory items.'
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/inventory/get_user_item_info:
    post:
      tags:
        - db_manager_inventory
      description: 'Returns detailed information of a specific inventory item for a given user by username and inventory item UUID.'
      operationId: get_inventory_item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                inventory_item_id:
                  $ref: '#/components/schemas/ItemId'
      responses:
        '200':
          description: Detailed information of the specified inventory item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Invalid request format.
        '404':
          description: Item not found for the given user and item UUID.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/inventory/remove_user_item:
    post:
      tags:
        - db_manager_inventory
      description: 'Removes a specific item from a user inventory. If item is in an auction, refuses the operation.'
      operationId: remove_item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                inventory_item_id:
                  $ref: '#/components/schemas/ItemId'
      responses:
        '200':
          description: Item removed successfully.
        '400':
          description: Invalid request format.
        '404':
          description: Item not found.
        '409':
          description: Cannot remove item that is in an open auction.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.



  ############################################
  ################# PROFILE ##################
  ############################################
  /db_manager/profile/get_user_info:
    post:
      tags:
        - db_manager_profile
      description: 'Returns info about a specific user given his UUID'
      operationId: get_user_info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Detailed information of the requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/profile/get_user_hashed_psw:
    post:
      tags:
        - db_manager_profile
      description: Returns user's hashed password
      operationId: get_user_hash_psw
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Profile updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                    description: The user's password.
        '400':
          description: Invalid request format.
        '404':
          description: User not found;
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/profile/edit:
    post:
      tags:
        - db_manager_profile
      description: 'Modifies user information'
      operationId: edit_user_info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
                username:
                  $ref: '#/components/schemas/Username'
                email:
                  $ref: '#/components/schemas/Email'
      responses:
        '200':
          description: Profile updated.
        '400':
          description: Invalid request format.
        '404':
          description: User not found;
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/profile/delete:
    post:
      tags:
        - db_manager_profile
      description: Deletes user's profile and all related data
      operationId: delete_user_profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Profile deleted successfully.
        '400':
          description: Invalid request format.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.

  ############################################
  ################### PVP ####################
  ############################################
  /db_manager/pvp/get_pvp_status:
    post:
      tags:
        - db_manager_pvp
      description: 'Obtains information regarding a pvp match.'
      operationId: get_pvp_status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pvp_match_uuid:
                  $ref: '#/components/schemas/PvPMatchId'
      responses:
        '200':
          description: PvP Match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvPRequestFull'
        '400':
          description: Invalid request.
        '404':
          description: Match not found.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/pvp/check_pending_pvp_requests:
    post:
      tags:
        - db_manager_pvp
      description: 'Returns a list of pending pvp requests.'
      operationId: check_pending_pvp_requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: List of pending pvp requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchRequests'
        '400':
          description: Invalid request.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/pvp/reject_pvp_request:
    post:
      tags:
        - db_manager_pvp
      description: 'Rejects a pending pvp request.'
      operationId: reject_pvp_prequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pvp_match_uuid:
                  $ref: '#/components/schemas/PvPMatchId'
                user_uuid:
                  $ref: '#/components/schemas/UserId'
      responses:
        '200':
          description: Battle rejected successfully.
        '400':
          description: Invalid request.
        '404':
          description: Cannot reject this PvP request.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/pvp/verify_gacha_item_ownership:
    post:
      tags:
        - db_manager_pvp
      description: Verifies that a list of gachas separated by a comma is entirely contained in player's inventory, before letting them send a pvp request.
      operationId: verify_gacha_item_ownership
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                team:
                  type: string
                  pattern: ^\(\s*[a-zA-Z]+\s*(,\s*[a-zA-Z]+\s*){6}\)$
                  example: '(3fa85f64-5717-4562-b3fc-2c963f66afa6, 3fa85f64-5717-4562-b3fc-2c963f66afa6, 3fa85f64-5717-4562-b3fc-2c963f66afa6, 3fa85f64-5717-4562-b3fc-2c963f66afa6, 3fa85f64-5717-4562-b3fc-2c963f66afa6, 3fa85f64-5717-4562-b3fc-2c963f66afa6, 3fa85f64-5717-4562-b3fc-2c963f66afa6)'
                  description: 'List (surrounded by round brackets) of gacha uuids separated by a comma'
      responses:
        '200':
          description: Owner UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
        '400':
          description: Invalid request.
        '401':
          description: Gacha items do not belong to you.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/pvp/finalize_pvp_request_sending:
    post:
      tags:
        - db_manager_pvp
      description: 'Inserts a PvP requests.'
      operationId: finalize_pvp_request_sending
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PvPRequestFull'
      responses:
        '200':
          description: Match request sent successfully.
        '400':
          description: Invalid request.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/pvp/get_gacha_stat:
    post:
      tags:
        - db_manager_pvp
      description: 'Returns a certain gacha stat for both gachas requested'
      operationId: get_gacha_stat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                player1_stand:
                  $ref: '#/components/schemas/ItemId'
                player2_stand:
                  $ref: '#/components/schemas/ItemId'
      responses:
        '200':
          description: Gacha stats retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  player1_stat:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 4
                    description: Value gacha stat.
                  player2_stat:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 4
                    description: Value gacha stat.
        '400':
          description: Invalid request.
        '500':
          description: Internal server error.
        '503':
          description: Circuit breaker open.
  /db_manager/pvp/set_match_results:
    post:
      tags:
        - db_manager_pvp
      description: 'Updates data of pvp_matches setting results.'
      operationId: set_match_results
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                match:
                  $ref: '#/components/schemas/PvPRequestFull'
                points:
                  type: integer
                  description: 'Match adds 1 for each game won by player1 and subtracts 1 for each game won by player2'
      responses:
          '200':
            description: Match result inserted.
          '400':
            description: Invalid request.
          '404':
            description: Match or User not found
          '500':
            description: Internal server error.
          '503':
            description: Circuit breaker open.
components:
  schemas:
    Team:
      type: array
      minItems: 7
      maxItems: 7
      items:
        $ref: '#/components/schemas/GachaId'
      description: Team used by players to battle each others.
    PvPRequestFull:
      type: object
      properties:
        pvp_match_uuid:
          $ref: '#/components/schemas/PvPMatchId'
        sender_id:
          $ref: '#/components/schemas/UserId'
        receiver_id:
          $ref: '#/components/schemas/UserId'
        teams:
          type: object
          properties:
            team1:
              $ref: '#/components/schemas/Team'
            team2:
              $ref: '#/components/schemas/Team'
        winner:
          type: boolean
          description: True if winner is player1, False if winner is player2, empty if there is no winner yet
        match_log:
          $ref: '#/components/schemas/MatchLog'
        
      description: Request of a PvP match sent by a player.
    MatchRequests:
      type: array
      items:
        type: object
        properties:
          pvp_match_uuid:
            $ref: '#/components/schemas/PvPMatchId'
          from:
            $ref: '#/components/schemas/UserId'
    MatchPairing:
      type: object
      properties:
        pair:
          type: string
          example: player1 StarPlatinum vs player2 GoldenExperience
        extracted_stat:
          $ref: '#/components/schemas/GachaStat'
        player1:
          type: object
          properties:
            stand_stat:
              type: integer
              minimum: 1
              maximum: 5
              example: 4
              description: Value of extracted_stat
        player2:
          type: object
          properties:
            stand_stat:
              type: integer
              minimum: 1
              maximum: 5
              example: 3
              description: Value of extracted_stat
    MatchLog:
      type: object
      description: Infos on a specific match
      properties:
        pairings:
          type: array
          minItems: 7
          maxItems: 7
          items:
            $ref: '#/components/schemas/MatchPairing'
    FeedbackPreview:
      properties:
        id:
          $ref: '#/components/schemas/FeedbackId'
        user_uuid:
          $ref: '#/components/schemas/UserId'
        timestamp:
          description: Timestamp when user created feedback
          format: date-time
          title: timestamp
          type: string
      title: Feedback preview, without content
      type: object
    FeedbackId:
      description: Id of feedback.
      title: FeedbackId
      type: integer
      example: 7
    FeedbackWithUsername:
      properties:
        id:
          $ref: '#/components/schemas/FeedbackId'
        user_uuid:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/Username'
        content:
          description: Actual feedback content.
          example: I love this game11!
          title: content
          type: string
        timestamp:
          description: Timestamp when user created feedback
          format: date-time
          title: timestamp
          type: string
      title: Feedback preview, including content
      type: object
    PageNumber:
      type: integer
      description: Page number, when needed.
      default: 1
      minimum: 1
    UserId:
      type: string
      format: uuid
      description: UUID of user.
    UserIdHex:
      type: string
      format: uuid
      description: UUID of user in hex format.
      example: '3fa85f6457174562b3fc2c963f66afa6'
    Username:
      description: The username of the user
      example: LeoPanta01_
      minLength: 5
      pattern: '^[a-zA-Z0-9_]+$'
      title: username
      type: string
    Password:
      type: string
      minLength: 8
      example: Th1s_c4n_b3_a_good_passw0rd...maybe
      description: The user's password must be at least 8 characters and can accept all characters.
    Email:
      description: The user's email.
      example: l.pantani5@studenti.unipi.it
      format: email
      title: Email
      type: string
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        username:
          $ref: '#/components/schemas/Username'
        email:
          $ref: '#/components/schemas/Email'
        joindate:
          type: string
          format: date-time
          description: Timestamp when user created their account
    AuctionId:
      type: string
      format: uuid
      description: UUID of the auction.
    AuctionStatus:
      type: string
      default: open
      enum:
        - open
        - closed
    ItemId:
      type: string
      format: uuid
      description: UUID of single item.
    Auction:
      type: object
      properties:
        auction_uuid:
          $ref: '#/components/schemas/AuctionId'
        status:
          $ref: '#/components/schemas/AuctionStatus'
        inventory_item_owner_id:
          $ref: '#/components/schemas/UserId'
        inventory_item_id:
          $ref: '#/components/schemas/ItemId'
        starting_price:
          type: integer
          description: Initial price set for the auction
        current_bid:
          type: integer
          description: Current highest bid
        current_bidder:
          $ref: '#/components/schemas/UserId'
        end_time:
          type: string
          format: date-time
          description: When the auction ends, in UTC timestamp
    InventoryItem:
      type: object
      properties:
        owner_id:
          $ref: '#/components/schemas/UserId'
        item_id:
          $ref: '#/components/schemas/ItemId'
        gacha_uuid:
          type: string
          format: uuid
          description: UUID representing a gacha
        pull_date:
          type: string
          format: date-time
          description: Timestamp of first obtainment
        obtained_date:
          type: string
          format: date-time
          description: Timestamp of latest obtainment
        owners_no:
          type: integer
          description: Number of previous owners of this item
        price_paid:
          type: integer
          description: Game currency used to buy this item
    GachaRarity:
      type: string
      enum:
        - common
        - rare
        - epic
        - legendary
      example: rare
      description: Rarity level of the gacha
    BundleId:
      type: string
      example: bundle_amazing
      pattern: ^[a-zA-Z0-9_]+$
      description: Internal code-name for the bundle.
    CurrencyName:
      type: string
      description: Currency code-name
      pattern: ^[A-Z]{3}$
      example: EUR
    CurrencyItem:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CurrencyName'
        value:
          type: number
          default: 10
          example: 10
          description: Amount of real currency.
          minimum: 0
          maximum: 999
    Bundle:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BundleId'
        name:
          type: string
          example: Amazing Bundle
          description: Visible name of the bundle.
        amount:
          type: integer
          description: No. of credits.
          example: 5000
        prices:
            $ref: '#/components/schemas/CurrencyItem'
    GachaId:
      type: string
      format: uuid
      description: UUID of the gacha
    GachaStat:
      type: string
      example: A
      pattern: ^[A-Ea-e]$
      description: Stat of a gacha.
    Gacha:
      type: object
      properties:
        gacha_uuid:
          $ref: '#/components/schemas/GachaId'
        name:
          type: string
          description: Name of the gacha
          example: Tower of Gray
        rarity:
          $ref: '#/components/schemas/GachaRarity'
        attributes:
          type: object
          properties:
            power:
              $ref: '#/components/schemas/GachaStat'
            speed:
              $ref: '#/components/schemas/GachaStat'
            durability:
              $ref: '#/components/schemas/GachaStat'
            precision:
              $ref: '#/components/schemas/GachaStat'
            range:
              $ref: '#/components/schemas/GachaStat'
            potential:
              $ref: '#/components/schemas/GachaStat'
          required:
            - power
            - speed
            - durability
            - precision
            - range
            - potential
          additionalProperties:
            type: string
    PoolId:
      type: string
      example: pool_starter
      pattern: ^[a-zA-Z0-9_]+$
      description: Internal code-name for the pool.
    Pool:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PoolId'
        name:
          type: string
          example: Starter Pool
          description: Visible name of the pool.
        price:
          type: integer
          example: 15
          description: In-game price to pull a gacha from this pool
          minimum: 1
        probabilities:
          $ref: '#/components/schemas/RarityProbability'
        items:
          type: array
          description: List of gacha items in the pool.
          items:
            $ref: '#/components/schemas/GachaId'
    RarityProbability:
      type: object
      properties:
        commonProbability:
          type: number
          format: float
          default: 0.5
        rareProbability:
          type: number
          format: float
          default: 0.3
        epicProbability:
          type: number
          format: float
          default: 0.15
        legendaryProbability:
          type: number
          format: float
          default: 0.05
    PvPMatchId:
      type: string
      format: uuid
      description: UUID of the PvP match.