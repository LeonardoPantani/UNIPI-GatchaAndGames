from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.gacha_attributes import GachaAttributes
from openapi_server.models.gacha_rarity import GachaRarity
from openapi_server import util

from openapi_server.models.gacha_attributes import GachaAttributes  # noqa: E501
from openapi_server.models.gacha_rarity import GachaRarity  # noqa: E501

class Gacha(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gacha_uuid=None, name=None, rarity=None, attributes=None):  # noqa: E501
        """Gacha - a model defined in OpenAPI

        :param gacha_uuid: The gacha_uuid of this Gacha.  # noqa: E501
        :type gacha_uuid: str
        :param name: The name of this Gacha.  # noqa: E501
        :type name: str
        :param rarity: The rarity of this Gacha.  # noqa: E501
        :type rarity: GachaRarity
        :param attributes: The attributes of this Gacha.  # noqa: E501
        :type attributes: GachaAttributes
        """
        self.openapi_types = {
            'gacha_uuid': str,
            'name': str,
            'rarity': GachaRarity,
            'attributes': GachaAttributes
        }

        self.attribute_map = {
            'gacha_uuid': 'gacha_uuid',
            'name': 'name',
            'rarity': 'rarity',
            'attributes': 'attributes'
        }

        self._gacha_uuid = gacha_uuid
        self._name = name
        self._rarity = rarity
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt) -> 'Gacha':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Gacha of this Gacha.  # noqa: E501
        :rtype: Gacha
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gacha_uuid(self) -> str:
        """Gets the gacha_uuid of this Gacha.

        UUID of the gacha  # noqa: E501

        :return: The gacha_uuid of this Gacha.
        :rtype: str
        """
        return self._gacha_uuid

    @gacha_uuid.setter
    def gacha_uuid(self, gacha_uuid: str):
        """Sets the gacha_uuid of this Gacha.

        UUID of the gacha  # noqa: E501

        :param gacha_uuid: The gacha_uuid of this Gacha.
        :type gacha_uuid: str
        """

        self._gacha_uuid = gacha_uuid

    @property
    def name(self) -> str:
        """Gets the name of this Gacha.

        Name of the gacha  # noqa: E501

        :return: The name of this Gacha.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Gacha.

        Name of the gacha  # noqa: E501

        :param name: The name of this Gacha.
        :type name: str
        """

        self._name = name

    @property
    def rarity(self) -> GachaRarity:
        """Gets the rarity of this Gacha.


        :return: The rarity of this Gacha.
        :rtype: GachaRarity
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity: GachaRarity):
        """Sets the rarity of this Gacha.


        :param rarity: The rarity of this Gacha.
        :type rarity: GachaRarity
        """

        self._rarity = rarity

    @property
    def attributes(self) -> GachaAttributes:
        """Gets the attributes of this Gacha.


        :return: The attributes of this Gacha.
        :rtype: GachaAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: GachaAttributes):
        """Sets the attributes of this Gacha.


        :param attributes: The attributes of this Gacha.
        :type attributes: GachaAttributes
        """

        self._attributes = attributes
