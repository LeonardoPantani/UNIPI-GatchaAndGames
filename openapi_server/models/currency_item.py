from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class CurrencyItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, value=10):  # noqa: E501
        """CurrencyItem - a model defined in OpenAPI

        :param name: The name of this CurrencyItem.  # noqa: E501
        :type name: str
        :param value: The value of this CurrencyItem.  # noqa: E501
        :type value: int
        """
        self.openapi_types = {
            'name': str,
            'value': int
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value'
        }

        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'CurrencyItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrencyItem of this CurrencyItem.  # noqa: E501
        :rtype: CurrencyItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CurrencyItem.

        Currency code-name  # noqa: E501

        :return: The name of this CurrencyItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CurrencyItem.

        Currency code-name  # noqa: E501

        :param name: The name of this CurrencyItem.
        :type name: str
        """
        if name is not None and not re.search(r'^[A-Z]{3}$', name):  # noqa: E501
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")  # noqa: E501

        self._name = name

    @property
    def value(self) -> int:
        """Gets the value of this CurrencyItem.

        Amount of real currency.  # noqa: E501

        :return: The value of this CurrencyItem.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this CurrencyItem.

        Amount of real currency.  # noqa: E501

        :param value: The value of this CurrencyItem.
        :type value: int
        """
        if value is not None and value > 999:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value less than or equal to `999`")  # noqa: E501
        if value is not None and value < 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value
