openapi: 3.0.0
info:
  contact:
    email: support@gachaandgames.it
  description: |-
    API for managing gacha items, auctions, PVP battles, currency, and user authentication.

    Useful links:
    - [Project repository](https://github.com/LeonardoPantani/UNIPI-GachaAndGames)
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html#license-text
  termsOfService: http://localhost:8080/tos
  title: Gacha System - OpenAPI 3.0
  version: 1.0.0
servers:
- description: Local server
  url: http://localhost:8080
paths:
  /admin/auctions/{auction_uuid}/update:
    put:
      description: Allows the update of an auction.
      operationId: update_auction
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: auction_uuid
        required: true
        schema:
          $ref: '#/components/schemas/AuctionId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
        required: true
      responses:
        "200":
          description: Auction updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Updates an auction.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/create:
    post:
      description: Allows the creation of a gacha.
      operationId: create_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
        required: true
      responses:
        "200":
          description: Gacha created.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Creates a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/{gacha_uuid}/delete:
    delete:
      description: Allows the deletion of a gacha.
      operationId: delete_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      responses:
        "200":
          description: Gacha deleted.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/{gacha_uuid}/update:
    put:
      description: Allows the update of a gacha.
      operationId: update_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
        required: true
      responses:
        "200":
          description: Gacha updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Updates a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/logs/:
    get:
      description: Allows to retrieve logs of the system.
      operationId: get_system_logs
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Latest system logs.
        "401":
          description: This account is not authorized to perform this action.
        "500":
          description: Internal server error.
      summary: Returns the system logs.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/create:
    post:
      description: Allows the creation of a pool.
      operationId: create_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        "200":
          description: Pool created.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Creates a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/{pool_id}/delete:
    delete:
      description: Allows the deletion of a pool.
      operationId: delete_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      responses:
        "200":
          description: Pool deleted.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/{pool_id}/update:
    put:
      description: Allows the update of a pool.
      operationId: update_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        "200":
          description: Pool updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Updates a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/list/:
    get:
      description: "Allows to retrieve all profiles, paginated."
      operationId: get_all_profiles
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: User profile.
        "400":
          description: Invalid username.
        "401":
          description: This account is not authorized to perform this action.
        "404":
          description: Username not found.
        "500":
          description: Internal server error.
      summary: Returns all profiles.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/ban:
    delete:
      description: Allows an admin to delete a user's profile.
      operationId: ban_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      responses:
        "200":
          description: Profile deleted.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes a profile.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/edit:
    put:
      description: Allows an admin to edit a user's profile.
      operationId: edit_user_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      - explode: true
        in: query
        name: email
        required: false
        schema:
          $ref: '#/components/schemas/Email'
        style: form
      - explode: true
        in: query
        name: username
        required: false
        schema:
          $ref: '#/components/schemas/Username'
        style: form
      responses:
        "200":
          description: Profile updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Edits properties of a profile.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/history:
    get:
      description: Allows to retrieve history of a user.
      operationId: get_user_history
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      - description: Type of history to show.
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - bundle
          - auction
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: User profile.
        "400":
          description: Invalid username.
        "401":
          description: This account is not authorized to perform this action.
        "404":
          description: Username not found.
        "500":
          description: Internal server error.
      summary: Returns history of a user.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /auctions/bid/{auction_uuid}:
    post:
      description: "Sends a bid to an active auction, if the user has enough currency."
      operationId: bid_on_auction
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Id of the auction to bid on.
        explode: false
        in: path
        name: auction_uuid
        required: true
        schema:
          $ref: '#/components/schemas/AuctionId'
        style: simple
      - description: Bid value.
        explode: true
        in: query
        name: bid
        required: true
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          description: Bid sent successfully.
        "400":
          description: Invalid query parameters.
        "403":
          description: Auction is closed.
        "406":
          description: Insufficient funds.
        "500":
          description: Internal server error.
      summary: Bids on an active auction
      tags:
      - auctions
      x-openapi-router-controller: openapi_server.controllers.auctions_controller
  /auctions/create:
    post:
      description: Creates an auction for an item in player's inventory.
      operationId: create_auction
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: The starting price of the auction.
        explode: true
        in: query
        name: starting_price
        required: false
        schema:
          default: 10
          maximum: 1000000
          minimum: 1
          type: integer
        style: form
      - description: The item to sell in the auction.
        explode: true
        in: query
        name: gacha_item
        required: true
        schema:
          $ref: '#/components/schemas/InventoryItemId'
        style: form
      responses:
        "200":
          description: Auction created successfully.
        "400":
          description: Invalid query parameters.
        "404":
          description: Item in player's inventory not found.
        "500":
          description: Internal server error.
      summary: Creates an auction.
      tags:
      - auctions
      x-openapi-router-controller: openapi_server.controllers.auctions_controller
  /auctions/history:
    get:
      description: Returns a list of all my auctions for gacha items.
      operationId: get_auctions_history
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuctionId'
                type: array
          description: List of my auctions.
        "400":
          description: Invalid query parameters
        "500":
          description: Internal server error
      summary: Retrieve history of my auctions.
      tags:
      - auctions
      x-openapi-router-controller: openapi_server.controllers.auctions_controller
  /auctions/list:
    get:
      description: Returns a list of all active auctions for gacha items.
      operationId: get_auctions_list
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Filter auctions by status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          default: active
          enum:
          - active
          - closed
          type: string
        style: form
      - description: Filter auctions by type of gacha item.
        explode: true
        in: query
        name: rarity
        required: false
        schema:
          $ref: '#/components/schemas/GachaRarity'
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuctionId'
                type: array
          description: "List of auctions, filtered."
        "400":
          description: Invalid query parameters
        "500":
          description: Internal server error
      summary: Retrieve the list of auctions.
      tags:
      - auctions
      x-openapi-router-controller: openapi_server.controllers.auctions_controller
  /auctions/status/{auction_uuid}:
    get:
      description: Returns info on the auction with a specific id.
      operationId: get_auction_status
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: The id of the auction to obtain info
        explode: false
        in: path
        name: auction_uuid
        required: true
        schema:
          $ref: '#/components/schemas/AuctionId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auction'
          description: The auction required
        "404":
          description: Auction not found
        "500":
          description: Internal server error
      summary: Retrieve info on specific auction.
      tags:
      - auctions
      x-openapi-router-controller: openapi_server.controllers.auctions_controller
  /auth/login:
    post:
      description: Logs a user into the game. Accepts username and password.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_request'
        required: true
      responses:
        "200":
          description: Login successful.
        "400":
          description: Missing fields.
        "401":
          description: Invalid credentials.
        "500":
          description: Internal server error.
      summary: Log in into an account.
      tags:
      - auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
  /auth/logout:
    delete:
      description: Allows an account to log out.
      operationId: logout
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Logout successful.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Logs out from an account.
      tags:
      - auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
  /auth/register:
    post:
      description: "Registers a new user account with username, email, and password."
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_request'
        required: true
      responses:
        "201":
          description: Registration successful.
        "400":
          description: Missing required fields.
        "409":
          description: The provided email address is already in use.
        "500":
          description: Internal server error.
      summary: Registers a new account.
      tags:
      - auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
  /currency/bundles:
    get:
      description: Returns a list of available bundles
      operationId: get_bundles
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Bundle'
                type: array
          description: Successful operation
        "500":
          description: Internal server error
      summary: Lists available bundles to buy currency.
      tags:
      - currency
      x-openapi-router-controller: openapi_server.controllers.currency_controller
  /currency/buy/{bundle_id}:
    post:
      description: Allows a player to purchase in-game credits using real-world currency.
      operationId: buy_currency
      parameters:
      - explode: false
        in: path
        name: bundle_id
        required: true
        schema:
          $ref: '#/components/schemas/BundleId'
        style: simple
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Purchase successful.
        "400":
          description: Purchase failed.
        "500":
          description: Internal server error.
      summary: Buy in-game credits
      tags:
      - currency
      x-openapi-router-controller: openapi_server.controllers.currency_controller
  /feedback:
    post:
      description: Creates a feedback to the admins.
      operationId: post_feedback
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: string
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Feedback created successfully.
        "400":
          description: Invalid query parameters.
        "500":
          description: Internal server error.
      summary: Sends a feedback.
      tags:
      - feedback
      x-openapi-router-controller: openapi_server.controllers.feedback_controller
  /gacha/list:
    get:
      description: Returns a list of all gachas.
      operationId: get_gachas
      parameters:
      - explode: true
        in: query
        name: not_owned
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pool'
                type: array
          description: Successful operation
        "500":
          description: Internal server error
      summary: Lists all gachas.
      tags:
      - gacha
      x-openapi-router-controller: openapi_server.controllers.gacha_controller
  /gacha/pools:
    get:
      description: Returns a list of available gacha pools.
      operationId: get_pool_info
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pool'
                type: array
          description: Successful operation
        "500":
          description: Internal server error
      summary: Lists available pools.
      tags:
      - gacha
      x-openapi-router-controller: openapi_server.controllers.gacha_controller
  /gacha/pull/{pool_id}:
    post:
      description: Allows a player to pull a random gacha item from a specified pool.
        Consumes in-game currency.
      operationId: pull_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gacha'
          description: Successful pull
        "403":
          description: Insufficient funds.
        "500":
          description: Internal server error.
      summary: Pull a random gacha from a specific pool.
      tags:
      - gacha
      x-openapi-router-controller: openapi_server.controllers.gacha_controller
  /gacha/{gacha_uuid}:
    get:
      description: Returns infos on a gacha.
      operationId: get_gacha_info
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gacha'
          description: Successful operation
        "500":
          description: Internal server error
      summary: Shows infos on a gacha.
      tags:
      - gacha
      x-openapi-router-controller: openapi_server.controllers.gacha_controller
  /inventory:
    delete:
      description: Returns a list of gacha items currently owned by the player.
      operationId: remove_inventory_item
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: item_id
        required: false
        schema:
          $ref: '#/components/schemas/InventoryItemId'
        style: form
      responses:
        "200":
          description: Item removed from inventory
        "404":
          description: Item not found.
        "500":
          description: Internal server error
      summary: Removes an item from player's inventory
      tags:
      - inventory
      x-openapi-router-controller: openapi_server.controllers.inventory_controller
    get:
      description: Returns a list of gacha items currently owned by the player.
      operationId: get_inventory
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryItem'
                type: array
          description: Successful operation
        "400":
          description: Invalid request.
        "500":
          description: Internal server error
      summary: Retrieve player's inventory
      tags:
      - inventory
      x-openapi-router-controller: openapi_server.controllers.inventory_controller
  /inventory/{inventory_item_id}:
    get:
      description: Returns infos on my inventory item.
      operationId: get_inventory_item_info
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: inventory_item_id
        required: true
        schema:
          $ref: '#/components/schemas/ItemId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InventoryItem'
                type: array
          description: Successful operation
        "500":
          description: Internal server error
      summary: Shows infos on my inventory item.
      tags:
      - inventory
      x-openapi-router-controller: openapi_server.controllers.inventory_controller
  /profile/delete:
    post:
      description: Allows a user to delete their account.
      operationId: delete_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteProfile_request'
        required: true
      responses:
        "200":
          description: Account deleted.
        "400":
          description: Invalid password.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes this account.
      tags:
      - profile
      x-openapi-router-controller: openapi_server.controllers.profile_controller
  /profile/edit:
    put:
      description: Allows a user to edit their profile.
      operationId: edit_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editProfile_request'
        required: true
      responses:
        "200":
          description: Profile updated.
        "400":
          description: Invalid fields.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Edits properties of the profile.
      tags:
      - profile
      x-openapi-router-controller: openapi_server.controllers.profile_controller
  /profile/{uuid}/info:
    get:
      description: Allows to retrieve the profile of a user by UUID.
      operationId: get_user_info
      parameters:
      - explode: false
        in: path
        name: uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User profile.
        "400":
          description: Invalid username.
        "404":
          description: Username not found.
        "500":
          description: Internal server error.
      summary: Returns infos about a UUID.
      tags:
      - profile
      x-openapi-router-controller: openapi_server.controllers.profile_controller
  /pvp/acceptPvPRequest/{pvp_match_uuid}:
    post:
      description: Allows a player to accept a PvP battle with another user.
      operationId: accept_pvp_request
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: The pending pvp request's match id.
        explode: false
        in: path
        name: pvp_match_uuid
        required: true
        schema:
          $ref: '#/components/schemas/PvPMatchId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Specify the team to battle the player with.
        required: true
      responses:
        "200":
          description: Battle started successfully.
        "400":
          description: Invalid pvp match id or team data.
        "500":
          description: Internal server error.
      summary: Accept a pending PvP request.
      tags:
      - pvp
      x-openapi-router-controller: openapi_server.controllers.pvp_controller
  /pvp/checkPendingPvPRequests:
    get:
      description: "If the current user has one or more pending requests, a list will\
        \ be returned. The current user's UUID is obtained via session cookie."
      operationId: check_pending_pvp_requests
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingPvPRequests'
          description: The list containing requests for current user.
        "400":
          description: Invalid input data
        "500":
          description: Internal server error
      summary: Returns a list of pending PvP requests.
      tags:
      - pvp
      x-openapi-router-controller: openapi_server.controllers.pvp_controller
  /pvp/rejectPvPRequest/{pvp_match_uuid}:
    post:
      description: Allows a player to reject a PvP battle with another user.
      operationId: reject_pv_prequest
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: The pending pvp request's match id.
        explode: false
        in: path
        name: pvp_match_uuid
        required: true
        schema:
          $ref: '#/components/schemas/PvPMatchId'
        style: simple
      responses:
        "200":
          description: Battle rejected successfully.
        "400":
          description: Invalid pvp match id.
        "500":
          description: Internal server error.
      summary: Rejects a pending PvP request.
      tags:
      - pvp
      x-openapi-router-controller: openapi_server.controllers.pvp_controller
  /pvp/sendPvPRequest/{user_uuid}:
    post:
      description: Sends a requests to another player to initiate a PvP battle.
      operationId: send_pvp_request
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: The player's UUID to send the battle request to.
        explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        description: Specify the team to battle the player with.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvPRequest'
          description: Request to fight sent successfully.
        "400":
          description: Player's UUID not found.
        "500":
          description: Internal server error.
      summary: Sends a PvP match request.
      tags:
      - pvp
      x-openapi-router-controller: openapi_server.controllers.pvp_controller
  /pvp/status/{pvp_match_uuid}:
    get:
      description: Allows a player to view the results of the match.
      operationId: get_pvp_status
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: The pending pvp request's match id.
        explode: false
        in: path
        name: pvp_match_uuid
        required: true
        schema:
          $ref: '#/components/schemas/PvPMatchId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PvPRequest'
          description: Match results found.
        "400":
          description: Invalid match id.
        "500":
          description: Internal server error.
      summary: Returns the results of a PvP match.
      tags:
      - pvp
      x-openapi-router-controller: openapi_server.controllers.pvp_controller
components:
  schemas:
    GachaStat:
      description: Stat of a gacha.
      example: A
      pattern: "^[A-Ea-e]$"
      type: string
    BundleId:
      description: Internal code-name for the bundle.
      example: bundle_amazing
      pattern: "^[a-zA-Z0-9_]+$"
      title: id
      type: string
    CurrencyName:
      description: Currency code-name
      example: EUR
      pattern: "^[A-Z]{3}$"
      title: name
      type: string
    CurrencyItem:
      example:
        name: EUR
        value: 10
      properties:
        name:
          description: Currency code-name
          example: EUR
          pattern: "^[A-Z]{3}$"
          title: name
          type: string
        value:
          default: 10
          description: Amount of real currency.
          example: 10
          maximum: 999
          minimum: 0
          title: value
          type: integer
      title: CurrencyItem
      type: object
    Bundle:
      example:
        amount: 5000
        name: Amazing Bundle
        id: bundle_amazing
        prices:
        - name: EUR
          value: 10
        - name: EUR
          value: 10
      properties:
        id:
          description: Internal code-name for the bundle.
          example: bundle_amazing
          pattern: "^[a-zA-Z0-9_]+$"
          title: id
          type: string
        name:
          description: Visible name of the bundle.
          example: Amazing Bundle
          title: name
          type: string
        amount:
          description: No. of credits.
          example: 5000
          title: amount
          type: integer
        prices:
          description: List of prices in different currencies.
          items:
            $ref: '#/components/schemas/CurrencyItem'
          title: prices
          type: array
      title: Bundle
      type: object
    PoolId:
      description: Internal code-name for the pool.
      example: pool_starter
      pattern: "^[a-zA-Z0-9_]+$"
      title: id
      type: string
    Pool:
      example:
        name: Starter Pool
        id: pool_starter
        probabilities:
          legendaryProbability: 5.962134
          epicProbability: 1.4658129
          commonProbability: 0.8008282
          rareProbability: 6.0274563
        items:
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
      properties:
        id:
          description: Internal code-name for the pool.
          example: pool_starter
          pattern: "^[a-zA-Z0-9_]+$"
          title: id
          type: string
        name:
          description: Visible name of the pool.
          example: Starter Pool
          title: name
          type: string
        probabilities:
          $ref: '#/components/schemas/RarityProbability'
        items:
          description: List of gacha items in the pool.
          items:
            $ref: '#/components/schemas/Gacha'
          title: items
          type: array
      title: Pool
      type: object
    RarityProbability:
      example:
        legendaryProbability: 5.962134
        epicProbability: 1.4658129
        commonProbability: 0.8008282
        rareProbability: 6.0274563
      properties:
        commonProbability:
          default: 0.5
          format: float
          title: commonProbability
          type: number
        rareProbability:
          default: 0.3
          format: float
          title: rareProbability
          type: number
        epicProbability:
          default: 0.15
          format: float
          title: epicProbability
          type: number
        legendaryProbability:
          default: 0.05
          format: float
          title: legendaryProbability
          type: number
      title: RarityProbability
      type: object
    GachaRarity:
      description: Rarity level of the gacha
      enum:
      - common
      - rare
      - epic
      - legendary
      example: rare
      title: GachaRarity
      type: string
    UserId:
      description: UUID of user.
      format: uuid
      title: owner_id
      type: string
    Username:
      description: The username of the user
      example: LeoPanta01_
      minLength: 5
      pattern: "^[a-zA-Z0-9_]+$"
      title: username
      type: string
    Email:
      description: The user's email.
      example: l.pantani5@studenti.unipi.it/
      format: email
      title: email
      type: string
    AuctionStatus:
      default: active
      enum:
      - active
      - closed
      title: AuctionStatus
      type: string
    ItemId:
      description: UUID of single item.
      format: uuid
      title: item_id
      type: string
    InventoryItemId:
      example:
        item_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        owner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        owner_id:
          description: UUID of user.
          format: uuid
          title: owner_id
          type: string
        item_id:
          description: UUID of single item.
          format: uuid
          title: item_id
          type: string
      title: InventoryItemId
      type: object
    AuctionId:
      description: UUID of the auction.
      format: uuid
      title: auction_uuid
      type: string
    Auction:
      example:
        auction_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        item_id:
          item_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          owner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        starting_price: 0.8008282
        end_time: 2000-01-23T04:56:07.000+00:00
        current_bid: 6.0274563
        status: active
        current_bidder: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        auction_uuid:
          description: UUID of the auction.
          format: uuid
          title: auction_uuid
          type: string
        status:
          $ref: '#/components/schemas/AuctionStatus'
        item_id:
          $ref: '#/components/schemas/InventoryItemId'
        starting_price:
          description: Initial price set for the auction
          format: float
          title: starting_price
          type: number
        current_bid:
          description: Current highest bid
          format: float
          title: current_bid
          type: number
        current_bidder:
          description: UUID of user.
          format: uuid
          title: owner_id
          type: string
        end_time:
          description: "When the auction ends, in UTC timestamp"
          format: date-time
          title: end_time
          type: string
      title: Auction
      type: object
    User:
      example:
        joindate: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: l.pantani5@studenti.unipi.it/
        username: LeoPanta01_
      properties:
        id:
          description: UUID of user.
          format: uuid
          title: owner_id
          type: string
        username:
          description: The username of the user
          example: LeoPanta01_
          minLength: 5
          pattern: "^[a-zA-Z0-9_]+$"
          title: username
          type: string
        email:
          description: The user's email.
          example: l.pantani5@studenti.unipi.it/
          format: email
          title: email
          type: string
        joindate:
          description: Timestamp when user created their account
          format: date-time
          title: joindate
          type: string
      title: User
      type: object
    GachaId:
      description: UUID of the gacha
      format: uuid
      title: GachaId
      type: string
    Gacha:
      example:
        gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: Tower of Gray
        attributes:
          durability: A
          precision: A
          range: A
          power: A
          potential: A
          speed: A
        rarity: rare
      properties:
        gacha_uuid:
          description: UUID of the gacha
          format: uuid
          title: GachaId
          type: string
        name:
          description: Name of the gacha
          example: Tower of Gray
          title: name
          type: string
        rarity:
          $ref: '#/components/schemas/GachaRarity'
        attributes:
          $ref: '#/components/schemas/Gacha_attributes'
      title: Gacha
      type: object
    Team:
      description: Team used by players to battle each others.
      example:
        gachas:
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
      properties:
        gachas:
          items:
            $ref: '#/components/schemas/Gacha'
          maxItems: 7
          minItems: 7
          title: gachas
          type: array
      title: Team
      type: object
    PvPMatchId:
      description: UUID of the PvP match.
      format: uuid
      title: pvp_match_uuid
      type: string
    MatchLog:
      example:
      - Battle between Player A and Player B starts NOW.
      - x uses Quick Attack!
      - Player A has won the match.
      items:
        type: string
      title: match_log
      type: array
    PvPRequest:
      description: Request of a PvP match sent by a player.
      example:
        match_log:
        - Battle between Player A and Player B starts NOW.
        - x uses Quick Attack!
        - Player A has won the match.
        receiver_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        pvp_match_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        winner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sent_timestamp: 2000-01-23T04:56:07.000+00:00
        sender_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        pvp_match_uuid:
          description: UUID of the PvP match.
          format: uuid
          title: pvp_match_uuid
          type: string
        sender_id:
          description: UUID of user.
          format: uuid
          title: owner_id
          type: string
        receiver_id:
          description: UUID of user.
          format: uuid
          title: owner_id
          type: string
        winner_id:
          description: UUID of user.
          format: uuid
          title: owner_id
          type: string
        match_log:
          example:
          - Battle between Player A and Player B starts NOW.
          - x uses Quick Attack!
          - Player A has won the match.
          items:
            type: string
          title: match_log
          type: array
        sent_timestamp:
          description: Request sent timestamp.
          format: date-time
          title: sent_timestamp
          type: string
      title: PvPRequest
      type: object
    PendingPvPRequests:
      description: List of pending pvp requests.
      example:
        requests:
        - match_log:
          - Battle between Player A and Player B starts NOW.
          - x uses Quick Attack!
          - Player A has won the match.
          receiver_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pvp_match_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          winner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sent_timestamp: 2000-01-23T04:56:07.000+00:00
          sender_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - match_log:
          - Battle between Player A and Player B starts NOW.
          - x uses Quick Attack!
          - Player A has won the match.
          receiver_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pvp_match_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          winner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sent_timestamp: 2000-01-23T04:56:07.000+00:00
          sender_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - match_log:
          - Battle between Player A and Player B starts NOW.
          - x uses Quick Attack!
          - Player A has won the match.
          receiver_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pvp_match_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          winner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sent_timestamp: 2000-01-23T04:56:07.000+00:00
          sender_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - match_log:
          - Battle between Player A and Player B starts NOW.
          - x uses Quick Attack!
          - Player A has won the match.
          receiver_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pvp_match_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          winner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sent_timestamp: 2000-01-23T04:56:07.000+00:00
          sender_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - match_log:
          - Battle between Player A and Player B starts NOW.
          - x uses Quick Attack!
          - Player A has won the match.
          receiver_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          pvp_match_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          winner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sent_timestamp: 2000-01-23T04:56:07.000+00:00
          sender_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        requests:
          items:
            $ref: '#/components/schemas/PvPRequest'
          maxItems: 100
          minItems: 0
          title: requests
          type: array
      title: PendingPvPRequests
      type: object
    InventoryItem:
      example:
        item_id:
          item_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          owner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        obtained_date: 2000-01-23T04:56:07.000+00:00
        price_paid: 6.0274563
        gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        pull_date: 2000-01-23T04:56:07.000+00:00
        owners_no: 0
      properties:
        item_id:
          $ref: '#/components/schemas/InventoryItemId'
        gacha_uuid:
          description: UUID representing a gacha
          format: uuid
          title: gacha_uuid
          type: string
        pull_date:
          description: Timestamp of first obtainment
          format: date-time
          title: pull_date
          type: string
        obtained_date:
          description: Timestamp of latest obtainment
          format: date-time
          title: obtained_date
          type: string
        owners_no:
          description: Number of previous owners of this item
          title: owners_no
          type: integer
        price_paid:
          description: Game currency used to buy this item
          format: float
          title: price_paid
          type: number
      title: InventoryItem
      type: object
    deleteProfile_request:
      properties:
        password:
          title: password
          type: string
      title: deleteProfile_request
    editProfile_request:
      properties:
        email:
          title: email
          type: string
        username:
          description: The username of the user
          example: LeoPanta01_
          minLength: 5
          pattern: "^[a-zA-Z0-9_]+$"
          title: username
          type: string
        password:
          title: password
          type: string
      title: editProfile_request
      type: object
    login_request:
      properties:
        username:
          description: The user's username.
          title: username
          type: string
        password:
          description: The user's password.
          title: password
          type: string
      required:
      - password
      - username
      title: login_request
      type: object
    register_request:
      properties:
        username:
          description: "The user's username. Must be at least 5 characters long and\
            \ contain only letters, numbers, and underscores."
          title: username
          type: string
        email:
          description: The user's email address. Must be a valid email format.
          format: email
          title: email
          type: string
        password:
          description: The user's password.
          title: password
          type: string
      required:
      - email
      - password
      - username
      title: register_request
      type: object
    Gacha_attributes:
      additionalProperties:
        type: string
      example:
        durability: A
        precision: A
        range: A
        power: A
        potential: A
        speed: A
      properties:
        power:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        speed:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        durability:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        precision:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        range:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        potential:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
      required:
      - durability
      - potential
      - power
      - precision
      - range
      - speed
      title: Gacha_attributes
      type: object