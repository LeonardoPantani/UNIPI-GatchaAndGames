from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class Bundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codename=None, public_name=None, amount=None, currency=None, value=10):  # noqa: E501
        """Bundle - a model defined in OpenAPI

        :param codename: The codename of this Bundle.  # noqa: E501
        :type codename: str
        :param public_name: The public_name of this Bundle.  # noqa: E501
        :type public_name: str
        :param amount: The amount of this Bundle.  # noqa: E501
        :type amount: int
        :param currency: The currency of this Bundle.  # noqa: E501
        :type currency: str
        :param value: The value of this Bundle.  # noqa: E501
        :type value: int
        """
        self.openapi_types = {
            'codename': str,
            'public_name': str,
            'amount': int,
            'currency': str,
            'value': int
        }

        self.attribute_map = {
            'codename': 'codename',
            'public_name': 'public_name',
            'amount': 'amount',
            'currency': 'currency',
            'value': 'value'
        }

        self._codename = codename
        self._public_name = public_name
        self._amount = amount
        self._currency = currency
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Bundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bundle of this Bundle.  # noqa: E501
        :rtype: Bundle
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codename(self) -> str:
        """Gets the codename of this Bundle.

        Internal code-name for the bundle.  # noqa: E501

        :return: The codename of this Bundle.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename: str):
        """Sets the codename of this Bundle.

        Internal code-name for the bundle.  # noqa: E501

        :param codename: The codename of this Bundle.
        :type codename: str
        """
        if codename is not None and not re.search(r'^[a-zA-Z0-9_]+$', codename):  # noqa: E501
            raise ValueError(r"Invalid value for `codename`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._codename = codename

    @property
    def public_name(self) -> str:
        """Gets the public_name of this Bundle.

        Visible name of the bundle.  # noqa: E501

        :return: The public_name of this Bundle.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name: str):
        """Sets the public_name of this Bundle.

        Visible name of the bundle.  # noqa: E501

        :param public_name: The public_name of this Bundle.
        :type public_name: str
        """

        self._public_name = public_name

    @property
    def amount(self) -> int:
        """Gets the amount of this Bundle.

        No. of credits.  # noqa: E501

        :return: The amount of this Bundle.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Bundle.

        No. of credits.  # noqa: E501

        :param amount: The amount of this Bundle.
        :type amount: int
        """

        self._amount = amount

    @property
    def currency(self) -> str:
        """Gets the currency of this Bundle.

        Currency code-name  # noqa: E501

        :return: The currency of this Bundle.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Bundle.

        Currency code-name  # noqa: E501

        :param currency: The currency of this Bundle.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3}$', currency):  # noqa: E501
            raise ValueError(r"Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")  # noqa: E501

        self._currency = currency

    @property
    def value(self) -> int:
        """Gets the value of this Bundle.

        Amount of real currency.  # noqa: E501

        :return: The value of this Bundle.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this Bundle.

        Amount of real currency.  # noqa: E501

        :param value: The value of this Bundle.
        :type value: int
        """
        if value is not None and value > 999:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value less than or equal to `999`")  # noqa: E501
        if value is not None and value < 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value
