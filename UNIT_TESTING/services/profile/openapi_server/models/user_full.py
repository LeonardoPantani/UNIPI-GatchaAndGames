from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.roles import Roles
import re
from openapi_server import util

from openapi_server.models.roles import Roles  # noqa: E501
import re  # noqa: E501

class UserFull(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, username=None, email=None, joindate=None, currency=None, pvp_score=None, role=None):  # noqa: E501
        """UserFull - a model defined in OpenAPI

        :param id: The id of this UserFull.  # noqa: E501
        :type id: str
        :param username: The username of this UserFull.  # noqa: E501
        :type username: str
        :param email: The email of this UserFull.  # noqa: E501
        :type email: str
        :param joindate: The joindate of this UserFull.  # noqa: E501
        :type joindate: datetime
        :param currency: The currency of this UserFull.  # noqa: E501
        :type currency: int
        :param pvp_score: The pvp_score of this UserFull.  # noqa: E501
        :type pvp_score: int
        :param role: The role of this UserFull.  # noqa: E501
        :type role: Roles
        """
        self.openapi_types = {
            'id': str,
            'username': str,
            'email': str,
            'joindate': datetime,
            'currency': int,
            'pvp_score': int,
            'role': Roles
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'joindate': 'joindate',
            'currency': 'currency',
            'pvp_score': 'pvp_score',
            'role': 'role'
        }

        self._id = id
        self._username = username
        self._email = email
        self._joindate = joindate
        self._currency = currency
        self._pvp_score = pvp_score
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'UserFull':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserFull of this UserFull.  # noqa: E501
        :rtype: UserFull
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this UserFull.

        UUID of user.  # noqa: E501

        :return: The id of this UserFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserFull.

        UUID of user.  # noqa: E501

        :param id: The id of this UserFull.
        :type id: str
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this UserFull.

        The user's username. Must be at least 5 characters long and contain only letters, numbers, and underscores.  # noqa: E501

        :return: The username of this UserFull.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserFull.

        The user's username. Must be at least 5 characters long and contain only letters, numbers, and underscores.  # noqa: E501

        :param username: The username of this UserFull.
        :type username: str
        """
        if username is not None and len(username) < 5:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `5`")  # noqa: E501
        if username is not None and not re.search(r'^[a-zA-Z0-9_]+$', username):  # noqa: E501
            raise ValueError(r"Invalid value for `username`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this UserFull.

        The user's email.  # noqa: E501

        :return: The email of this UserFull.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this UserFull.

        The user's email.  # noqa: E501

        :param email: The email of this UserFull.
        :type email: str
        """

        self._email = email

    @property
    def joindate(self) -> datetime:
        """Gets the joindate of this UserFull.

        Timestamp when user created their account  # noqa: E501

        :return: The joindate of this UserFull.
        :rtype: datetime
        """
        return self._joindate

    @joindate.setter
    def joindate(self, joindate: datetime):
        """Sets the joindate of this UserFull.

        Timestamp when user created their account  # noqa: E501

        :param joindate: The joindate of this UserFull.
        :type joindate: datetime
        """

        self._joindate = joindate

    @property
    def currency(self) -> int:
        """Gets the currency of this UserFull.

        In-game currency of the user.  # noqa: E501

        :return: The currency of this UserFull.
        :rtype: int
        """
        return self._currency

    @currency.setter
    def currency(self, currency: int):
        """Sets the currency of this UserFull.

        In-game currency of the user.  # noqa: E501

        :param currency: The currency of this UserFull.
        :type currency: int
        """

        self._currency = currency

    @property
    def pvp_score(self) -> int:
        """Gets the pvp_score of this UserFull.

        PvP score of the user.  # noqa: E501

        :return: The pvp_score of this UserFull.
        :rtype: int
        """
        return self._pvp_score

    @pvp_score.setter
    def pvp_score(self, pvp_score: int):
        """Sets the pvp_score of this UserFull.

        PvP score of the user.  # noqa: E501

        :param pvp_score: The pvp_score of this UserFull.
        :type pvp_score: int
        """

        self._pvp_score = pvp_score

    @property
    def role(self) -> Roles:
        """Gets the role of this UserFull.


        :return: The role of this UserFull.
        :rtype: Roles
        """
        return self._role

    @role.setter
    def role(self, role: Roles):
        """Sets the role of this UserFull.


        :param role: The role of this UserFull.
        :type role: Roles
        """

        self._role = role
