from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class GachaAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, power=None, speed=None, durability=None, precision=None, range=None, potential=None):  # noqa: E501
        """GachaAttributes - a model defined in OpenAPI

        :param power: The power of this GachaAttributes.  # noqa: E501
        :type power: str
        :param speed: The speed of this GachaAttributes.  # noqa: E501
        :type speed: str
        :param durability: The durability of this GachaAttributes.  # noqa: E501
        :type durability: str
        :param precision: The precision of this GachaAttributes.  # noqa: E501
        :type precision: str
        :param range: The range of this GachaAttributes.  # noqa: E501
        :type range: str
        :param potential: The potential of this GachaAttributes.  # noqa: E501
        :type potential: str
        """
        self.openapi_types = {
            'power': str,
            'speed': str,
            'durability': str,
            'precision': str,
            'range': str,
            'potential': str
        }

        self.attribute_map = {
            'power': 'power',
            'speed': 'speed',
            'durability': 'durability',
            'precision': 'precision',
            'range': 'range',
            'potential': 'potential'
        }

        self._power = power
        self._speed = speed
        self._durability = durability
        self._precision = precision
        self._range = range
        self._potential = potential

    @classmethod
    def from_dict(cls, dikt) -> 'GachaAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Gacha_attributes of this GachaAttributes.  # noqa: E501
        :rtype: GachaAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def power(self) -> str:
        """Gets the power of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :return: The power of this GachaAttributes.
        :rtype: str
        """
        return self._power

    @power.setter
    def power(self, power: str):
        """Sets the power of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :param power: The power of this GachaAttributes.
        :type power: str
        """
        if power is None:
            raise ValueError("Invalid value for `power`, must not be `None`")  # noqa: E501
        if power is not None and not re.search(r'^[A-Ea-e]$', power):  # noqa: E501
            raise ValueError("Invalid value for `power`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._power = power

    @property
    def speed(self) -> str:
        """Gets the speed of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :return: The speed of this GachaAttributes.
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed: str):
        """Sets the speed of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :param speed: The speed of this GachaAttributes.
        :type speed: str
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501
        if speed is not None and not re.search(r'^[A-Ea-e]$', speed):  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._speed = speed

    @property
    def durability(self) -> str:
        """Gets the durability of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :return: The durability of this GachaAttributes.
        :rtype: str
        """
        return self._durability

    @durability.setter
    def durability(self, durability: str):
        """Sets the durability of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :param durability: The durability of this GachaAttributes.
        :type durability: str
        """
        if durability is None:
            raise ValueError("Invalid value for `durability`, must not be `None`")  # noqa: E501
        if durability is not None and not re.search(r'^[A-Ea-e]$', durability):  # noqa: E501
            raise ValueError("Invalid value for `durability`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._durability = durability

    @property
    def precision(self) -> str:
        """Gets the precision of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :return: The precision of this GachaAttributes.
        :rtype: str
        """
        return self._precision

    @precision.setter
    def precision(self, precision: str):
        """Sets the precision of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :param precision: The precision of this GachaAttributes.
        :type precision: str
        """
        if precision is None:
            raise ValueError("Invalid value for `precision`, must not be `None`")  # noqa: E501
        if precision is not None and not re.search(r'^[A-Ea-e]$', precision):  # noqa: E501
            raise ValueError("Invalid value for `precision`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._precision = precision

    @property
    def range(self) -> str:
        """Gets the range of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :return: The range of this GachaAttributes.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range: str):
        """Sets the range of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :param range: The range of this GachaAttributes.
        :type range: str
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501
        if range is not None and not re.search(r'^[A-Ea-e]$', range):  # noqa: E501
            raise ValueError("Invalid value for `range`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._range = range

    @property
    def potential(self) -> str:
        """Gets the potential of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :return: The potential of this GachaAttributes.
        :rtype: str
        """
        return self._potential

    @potential.setter
    def potential(self, potential: str):
        """Sets the potential of this GachaAttributes.

        Stat of a gacha.  # noqa: E501

        :param potential: The potential of this GachaAttributes.
        :type potential: str
        """
        if potential is None:
            raise ValueError("Invalid value for `potential`, must not be `None`")  # noqa: E501
        if potential is not None and not re.search(r'^[A-Ea-e]$', potential):  # noqa: E501
            raise ValueError("Invalid value for `potential`, must be a follow pattern or equal to `/^[A-Ea-e]$/`")  # noqa: E501

        self._potential = potential
