from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class Pool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, codename=None, public_name=None, price=None, probability_common=0.5, probability_rare=0.3, probability_epic=0.15, probability_legendary=0.05, items=None):  # noqa: E501
        """Pool - a model defined in OpenAPI

        :param codename: The codename of this Pool.  # noqa: E501
        :type codename: str
        :param public_name: The public_name of this Pool.  # noqa: E501
        :type public_name: str
        :param price: The price of this Pool.  # noqa: E501
        :type price: int
        :param probability_common: The probability_common of this Pool.  # noqa: E501
        :type probability_common: float
        :param probability_rare: The probability_rare of this Pool.  # noqa: E501
        :type probability_rare: float
        :param probability_epic: The probability_epic of this Pool.  # noqa: E501
        :type probability_epic: float
        :param probability_legendary: The probability_legendary of this Pool.  # noqa: E501
        :type probability_legendary: float
        :param items: The items of this Pool.  # noqa: E501
        :type items: List[str]
        """
        self.openapi_types = {
            'codename': str,
            'public_name': str,
            'price': int,
            'probability_common': float,
            'probability_rare': float,
            'probability_epic': float,
            'probability_legendary': float,
            'items': List[str]
        }

        self.attribute_map = {
            'codename': 'codename',
            'public_name': 'public_name',
            'price': 'price',
            'probability_common': 'probability_common',
            'probability_rare': 'probability_rare',
            'probability_epic': 'probability_epic',
            'probability_legendary': 'probability_legendary',
            'items': 'items'
        }

        self._codename = codename
        self._public_name = public_name
        self._price = price
        self._probability_common = probability_common
        self._probability_rare = probability_rare
        self._probability_epic = probability_epic
        self._probability_legendary = probability_legendary
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Pool':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pool of this Pool.  # noqa: E501
        :rtype: Pool
        """
        return util.deserialize_model(dikt, cls)

    @property
    def codename(self) -> str:
        """Gets the codename of this Pool.

        Internal code-name for the pool.  # noqa: E501

        :return: The codename of this Pool.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename: str):
        """Sets the codename of this Pool.

        Internal code-name for the pool.  # noqa: E501

        :param codename: The codename of this Pool.
        :type codename: str
        """
        if codename is not None and not re.search(r'^[a-zA-Z0-9_]+$', codename):  # noqa: E501
            raise ValueError(r"Invalid value for `codename`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._codename = codename

    @property
    def public_name(self) -> str:
        """Gets the public_name of this Pool.

        Visible name of the pool.  # noqa: E501

        :return: The public_name of this Pool.
        :rtype: str
        """
        return self._public_name

    @public_name.setter
    def public_name(self, public_name: str):
        """Sets the public_name of this Pool.

        Visible name of the pool.  # noqa: E501

        :param public_name: The public_name of this Pool.
        :type public_name: str
        """

        self._public_name = public_name

    @property
    def price(self) -> int:
        """Gets the price of this Pool.

        In-game price to pull a gacha from this pool  # noqa: E501

        :return: The price of this Pool.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Pool.

        In-game price to pull a gacha from this pool  # noqa: E501

        :param price: The price of this Pool.
        :type price: int
        """
        if price is not None and price < 1:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `1`")  # noqa: E501

        self._price = price

    @property
    def probability_common(self) -> float:
        """Gets the probability_common of this Pool.


        :return: The probability_common of this Pool.
        :rtype: float
        """
        return self._probability_common

    @probability_common.setter
    def probability_common(self, probability_common: float):
        """Sets the probability_common of this Pool.


        :param probability_common: The probability_common of this Pool.
        :type probability_common: float
        """

        self._probability_common = probability_common

    @property
    def probability_rare(self) -> float:
        """Gets the probability_rare of this Pool.


        :return: The probability_rare of this Pool.
        :rtype: float
        """
        return self._probability_rare

    @probability_rare.setter
    def probability_rare(self, probability_rare: float):
        """Sets the probability_rare of this Pool.


        :param probability_rare: The probability_rare of this Pool.
        :type probability_rare: float
        """

        self._probability_rare = probability_rare

    @property
    def probability_epic(self) -> float:
        """Gets the probability_epic of this Pool.


        :return: The probability_epic of this Pool.
        :rtype: float
        """
        return self._probability_epic

    @probability_epic.setter
    def probability_epic(self, probability_epic: float):
        """Sets the probability_epic of this Pool.


        :param probability_epic: The probability_epic of this Pool.
        :type probability_epic: float
        """

        self._probability_epic = probability_epic

    @property
    def probability_legendary(self) -> float:
        """Gets the probability_legendary of this Pool.


        :return: The probability_legendary of this Pool.
        :rtype: float
        """
        return self._probability_legendary

    @probability_legendary.setter
    def probability_legendary(self, probability_legendary: float):
        """Sets the probability_legendary of this Pool.


        :param probability_legendary: The probability_legendary of this Pool.
        :type probability_legendary: float
        """

        self._probability_legendary = probability_legendary

    @property
    def items(self) -> List[str]:
        """Gets the items of this Pool.

        List of gacha items in the pool.  # noqa: E501

        :return: The items of this Pool.
        :rtype: List[str]
        """
        return self._items

    @items.setter
    def items(self, items: List[str]):
        """Sets the items of this Pool.

        List of gacha items in the pool.  # noqa: E501

        :param items: The items of this Pool.
        :type items: List[str]
        """

        self._items = items
