from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckOwnerOfTeamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, team=None):  # noqa: E501
        """CheckOwnerOfTeamRequest - a model defined in OpenAPI

        :param team: The team of this CheckOwnerOfTeamRequest.  # noqa: E501
        :type team: List[str]
        """
        self.openapi_types = {
            'team': List[str]
        }

        self.attribute_map = {
            'team': 'team'
        }

        self._team = team

    @classmethod
    def from_dict(cls, dikt) -> 'CheckOwnerOfTeamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The check_owner_of_team_request of this CheckOwnerOfTeamRequest.  # noqa: E501
        :rtype: CheckOwnerOfTeamRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def team(self) -> List[str]:
        """Gets the team of this CheckOwnerOfTeamRequest.

        Team used by players to battle each others.  # noqa: E501

        :return: The team of this CheckOwnerOfTeamRequest.
        :rtype: List[str]
        """
        return self._team

    @team.setter
    def team(self, team: List[str]):
        """Sets the team of this CheckOwnerOfTeamRequest.

        Team used by players to battle each others.  # noqa: E501

        :param team: The team of this CheckOwnerOfTeamRequest.
        :type team: List[str]
        """
        if team is not None and len(team) > 7:
            raise ValueError("Invalid value for `team`, number of items must be less than or equal to `7`")  # noqa: E501
        if team is not None and len(team) < 7:
            raise ValueError("Invalid value for `team`, number of items must be greater than or equal to `7`")  # noqa: E501

        self._team = team
