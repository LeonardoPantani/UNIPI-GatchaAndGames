from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class HistoryListBUNDLEInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_uuid=None, timestamp=None, codename=None, currency_name=None):  # noqa: E501
        """HistoryListBUNDLEInner - a model defined in OpenAPI

        :param user_uuid: The user_uuid of this HistoryListBUNDLEInner.  # noqa: E501
        :type user_uuid: str
        :param timestamp: The timestamp of this HistoryListBUNDLEInner.  # noqa: E501
        :type timestamp: datetime
        :param codename: The codename of this HistoryListBUNDLEInner.  # noqa: E501
        :type codename: str
        :param currency_name: The currency_name of this HistoryListBUNDLEInner.  # noqa: E501
        :type currency_name: str
        """
        self.openapi_types = {
            'user_uuid': str,
            'timestamp': datetime,
            'codename': str,
            'currency_name': str
        }

        self.attribute_map = {
            'user_uuid': 'user_uuid',
            'timestamp': 'timestamp',
            'codename': 'codename',
            'currency_name': 'currency_name'
        }

        self._user_uuid = user_uuid
        self._timestamp = timestamp
        self._codename = codename
        self._currency_name = currency_name

    @classmethod
    def from_dict(cls, dikt) -> 'HistoryListBUNDLEInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HistoryListBUNDLE_inner of this HistoryListBUNDLEInner.  # noqa: E501
        :rtype: HistoryListBUNDLEInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_uuid(self) -> str:
        """Gets the user_uuid of this HistoryListBUNDLEInner.

        UUID of user.  # noqa: E501

        :return: The user_uuid of this HistoryListBUNDLEInner.
        :rtype: str
        """
        return self._user_uuid

    @user_uuid.setter
    def user_uuid(self, user_uuid: str):
        """Sets the user_uuid of this HistoryListBUNDLEInner.

        UUID of user.  # noqa: E501

        :param user_uuid: The user_uuid of this HistoryListBUNDLEInner.
        :type user_uuid: str
        """

        self._user_uuid = user_uuid

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this HistoryListBUNDLEInner.

        Timestamp when user created feedback  # noqa: E501

        :return: The timestamp of this HistoryListBUNDLEInner.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this HistoryListBUNDLEInner.

        Timestamp when user created feedback  # noqa: E501

        :param timestamp: The timestamp of this HistoryListBUNDLEInner.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def codename(self) -> str:
        """Gets the codename of this HistoryListBUNDLEInner.


        :return: The codename of this HistoryListBUNDLEInner.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename: str):
        """Sets the codename of this HistoryListBUNDLEInner.


        :param codename: The codename of this HistoryListBUNDLEInner.
        :type codename: str
        """

        self._codename = codename

    @property
    def currency_name(self) -> str:
        """Gets the currency_name of this HistoryListBUNDLEInner.

        Currency code-name  # noqa: E501

        :return: The currency_name of this HistoryListBUNDLEInner.
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name: str):
        """Sets the currency_name of this HistoryListBUNDLEInner.

        Currency code-name  # noqa: E501

        :param currency_name: The currency_name of this HistoryListBUNDLEInner.
        :type currency_name: str
        """
        if currency_name is not None and not re.search(r'^[A-Z]{3}$', currency_name):  # noqa: E501
            raise ValueError(r"Invalid value for `currency_name`, must be a follow pattern or equal to `/^[A-Z]{3}$/`")  # noqa: E501

        self._currency_name = currency_name
