from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.rarity_probability import RarityProbability
import re
from openapi_server import util

from openapi_server.models.rarity_probability import RarityProbability  # noqa: E501
import re  # noqa: E501

class Pool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, probabilities=None, items=None):  # noqa: E501
        """Pool - a model defined in OpenAPI

        :param id: The id of this Pool.  # noqa: E501
        :type id: str
        :param name: The name of this Pool.  # noqa: E501
        :type name: str
        :param probabilities: The probabilities of this Pool.  # noqa: E501
        :type probabilities: RarityProbability
        :param items: The items of this Pool.  # noqa: E501
        :type items: List[str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'probabilities': RarityProbability,
            'items': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'probabilities': 'probabilities',
            'items': 'items'
        }

        self._id = id
        self._name = name
        self._probabilities = probabilities
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'Pool':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pool of this Pool.  # noqa: E501
        :rtype: Pool
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Pool.

        Internal code-name for the pool.  # noqa: E501

        :return: The id of this Pool.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Pool.

        Internal code-name for the pool.  # noqa: E501

        :param id: The id of this Pool.
        :type id: str
        """
        if id is not None and not re.search(r'^[a-zA-Z0-9_]+$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Pool.

        Visible name of the pool.  # noqa: E501

        :return: The name of this Pool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Pool.

        Visible name of the pool.  # noqa: E501

        :param name: The name of this Pool.
        :type name: str
        """

        self._name = name

    @property
    def probabilities(self) -> RarityProbability:
        """Gets the probabilities of this Pool.


        :return: The probabilities of this Pool.
        :rtype: RarityProbability
        """
        return self._probabilities

    @probabilities.setter
    def probabilities(self, probabilities: RarityProbability):
        """Sets the probabilities of this Pool.


        :param probabilities: The probabilities of this Pool.
        :type probabilities: RarityProbability
        """

        self._probabilities = probabilities

    @property
    def items(self) -> List[str]:
        """Gets the items of this Pool.

        List of gacha items in the pool.  # noqa: E501

        :return: The items of this Pool.
        :rtype: List[str]
        """
        return self._items

    @items.setter
    def items(self, items: List[str]):
        """Sets the items of this Pool.

        List of gacha items in the pool.  # noqa: E501

        :param items: The items of this Pool.
        :type items: List[str]
        """

        self._items = items
