from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp=None, message=None, service_type=None, endpoint=None, level=None):  # noqa: E501
        """Log - a model defined in OpenAPI

        :param timestamp: The timestamp of this Log.  # noqa: E501
        :type timestamp: int
        :param message: The message of this Log.  # noqa: E501
        :type message: str
        :param service_type: The service_type of this Log.  # noqa: E501
        :type service_type: str
        :param endpoint: The endpoint of this Log.  # noqa: E501
        :type endpoint: str
        :param level: The level of this Log.  # noqa: E501
        :type level: str
        """
        self.openapi_types = {
            'timestamp': int,
            'message': str,
            'service_type': str,
            'endpoint': str,
            'level': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'message': 'message',
            'service_type': 'service_type',
            'endpoint': 'endpoint',
            'level': 'level'
        }

        self._timestamp = timestamp
        self._message = message
        self._service_type = service_type
        self._endpoint = endpoint
        self._level = level

    @classmethod
    def from_dict(cls, dikt) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Log of this Log.  # noqa: E501
        :rtype: Log
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Log.

        Unix time in seconds since January 1, 1970.  # noqa: E501

        :return: The timestamp of this Log.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Log.

        Unix time in seconds since January 1, 1970.  # noqa: E501

        :param timestamp: The timestamp of this Log.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def message(self) -> str:
        """Gets the message of this Log.

        Content of the log  # noqa: E501

        :return: The message of this Log.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Log.

        Content of the log  # noqa: E501

        :param message: The message of this Log.
        :type message: str
        """

        self._message = message

    @property
    def service_type(self) -> str:
        """Gets the service_type of this Log.

        Name of the service  # noqa: E501

        :return: The service_type of this Log.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type: str):
        """Sets the service_type of this Log.

        Name of the service  # noqa: E501

        :param service_type: The service_type of this Log.
        :type service_type: str
        """

        self._service_type = service_type

    @property
    def endpoint(self) -> str:
        """Gets the endpoint of this Log.

        Name of the endpoint  # noqa: E501

        :return: The endpoint of this Log.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: str):
        """Sets the endpoint of this Log.

        Name of the endpoint  # noqa: E501

        :param endpoint: The endpoint of this Log.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def level(self) -> str:
        """Gets the level of this Log.

        Level of criticality  # noqa: E501

        :return: The level of this Log.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this Log.

        Level of criticality  # noqa: E501

        :param level: The level of this Log.
        :type level: str
        """
        allowed_values = ["general", "info", "warning", "error"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level
