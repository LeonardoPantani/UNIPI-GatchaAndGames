from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, username=None, email=None, joindate=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param joindate: The joindate of this User.  # noqa: E501
        :type joindate: datetime
        """
        self.openapi_types = {
            'id': str,
            'username': str,
            'email': str,
            'joindate': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'joindate': 'joindate'
        }

        self._id = id
        self._username = username
        self._email = email
        self._joindate = joindate

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.

        UUID of user.  # noqa: E501

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.

        UUID of user.  # noqa: E501

        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.

        The user's username. Must be at least 5 characters long and contain only letters, numbers, and underscores.  # noqa: E501

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.

        The user's username. Must be at least 5 characters long and contain only letters, numbers, and underscores.  # noqa: E501

        :param username: The username of this User.
        :type username: str
        """
        if username is not None and len(username) < 5:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `5`")  # noqa: E501
        if username is not None and not re.search(r'^[a-zA-Z0-9_]+$', username):  # noqa: E501
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/^[a-zA-Z0-9_]+$/`")  # noqa: E501

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.

        The user's email.  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.

        The user's email.  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def joindate(self) -> datetime:
        """Gets the joindate of this User.

        Timestamp when user created their account  # noqa: E501

        :return: The joindate of this User.
        :rtype: datetime
        """
        return self._joindate

    @joindate.setter
    def joindate(self, joindate: datetime):
        """Sets the joindate of this User.

        Timestamp when user created their account  # noqa: E501

        :param joindate: The joindate of this User.
        :type joindate: datetime
        """

        self._joindate = joindate
