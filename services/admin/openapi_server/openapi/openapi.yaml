openapi: 3.0.0
info:
  contact:
    email: support@gachaandgames.it
  description: |-
    API for managing gacha items, auctions, PVP battles, currency, and user authentication.

    Useful links:
    - [Project repository](https://github.com/LeonardoPantani/UNIPI-GachaAndGames)
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html#license-text
  termsOfService: http://localhost:3004/tos
  title: Gacha System - OpenAPI 3.0
  version: 1.0.0
servers:
- description: Local server
  url: http://localhost:3004
paths:
  /admin/auctions/{auction_uuid}/update:
    put:
      description: Allows the update of an auction.
      operationId: update_auction
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: auction_uuid
        required: true
        schema:
          $ref: '#/components/schemas/AuctionId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
        required: true
      responses:
        "200":
          description: Auction updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Updates an auction.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/feedback/list/:
    get:
      description: "Allows to retrieve all feedbacks, paginated."
      operationId: get_all_feedbacks
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/getAllFeedbacks_200_response_inner'
                type: array
          description: Feedback list.
        "400":
          description: Invalid page number.
        "401":
          description: This account is not authorized to perform this action.
        "500":
          description: Internal server error.
      summary: Returns all feedbacks.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/feedback/{feedback_id}:
    get:
      description: Allows to read a specific feedback.
      operationId: get_feedback
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - description: Id of feedback.
        explode: false
        in: path
        name: feedback_id
        required: true
        schema:
          default: 0
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                example: I like this game very much.
                type: string
          description: Feedback structure.
        "400":
          description: Invalid username.
        "401":
          description: This account is not authorized to perform this action.
        "404":
          description: Username not found.
        "500":
          description: Internal server error.
      summary: Returns a feedback by id.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/create:
    post:
      description: Allows the creation of a gacha.
      operationId: create_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
        required: true
      responses:
        "200":
          description: Gacha created.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Creates a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/{gacha_uuid}/delete:
    delete:
      description: Allows the deletion of a gacha.
      operationId: delete_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      responses:
        "200":
          description: Gacha deleted.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/{gacha_uuid}/update:
    put:
      description: Allows the update of a gacha.
      operationId: update_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
        required: true
      responses:
        "200":
          description: Gacha updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Updates a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/logs/:
    get:
      description: Allows to retrieve logs of the system.
      operationId: get_system_logs
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Latest system logs.
        "401":
          description: This account is not authorized to perform this action.
        "500":
          description: Internal server error.
      summary: Returns the system logs.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/create:
    post:
      description: Allows the creation of a pool.
      operationId: create_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        "200":
          description: Pool created.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Creates a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/{pool_id}/delete:
    delete:
      description: Allows the deletion of a pool.
      operationId: delete_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      responses:
        "200":
          description: Pool deleted.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/{pool_id}/update:
    put:
      description: Allows the update of a pool.
      operationId: update_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        "200":
          description: Pool updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Updates a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/list/:
    get:
      description: "Allows to retrieve all profiles, paginated."
      operationId: get_all_profiles
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: User profile.
        "400":
          description: Invalid username.
        "401":
          description: This account is not authorized to perform this action.
        "404":
          description: Username not found.
        "500":
          description: Internal server error.
      summary: Returns all profiles.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/ban:
    delete:
      description: Allows an admin to delete a user's profile.
      operationId: ban_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      responses:
        "200":
          description: Profile deleted.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Deletes a profile.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/edit:
    put:
      description: Allows an admin to edit a user's profile.
      operationId: edit_user_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      - explode: true
        in: query
        name: email
        required: false
        schema:
          $ref: '#/components/schemas/Email'
        style: form
      - explode: true
        in: query
        name: username
        required: false
        schema:
          $ref: '#/components/schemas/Username'
        style: form
      responses:
        "200":
          description: Profile updated.
        "400":
          description: Invalid fields.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not logged in.
        "500":
          description: Internal server error.
      summary: Edits properties of a profile.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/history:
    get:
      description: Allows to retrieve history of a user.
      operationId: get_user_history
      parameters:
      - explode: true
        in: cookie
        name: session
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      - description: Type of history to show.
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - bundle
          - auction
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: User profile.
        "400":
          description: Invalid username.
        "401":
          description: This account is not authorized to perform this action.
        "404":
          description: Username not found.
        "500":
          description: Internal server error.
      summary: Returns history of a user.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
components:
  schemas:
    GachaStat:
      description: Stat of a gacha.
      example: A
      pattern: "^[A-Ea-e]$"
      type: string
    PoolId:
      description: Internal code-name for the pool.
      example: pool_starter
      pattern: "^[a-zA-Z0-9_]+$"
      title: id
      type: string
    Pool:
      example:
        name: Starter Pool
        id: pool_starter
        probabilities:
          legendaryProbability: 5.962134
          epicProbability: 1.4658129
          commonProbability: 0.8008282
          rareProbability: 6.0274563
        items:
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
        - gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: Tower of Gray
          attributes:
            durability: A
            precision: A
            range: A
            power: A
            potential: A
            speed: A
          rarity: rare
      properties:
        id:
          description: Internal code-name for the pool.
          example: pool_starter
          pattern: "^[a-zA-Z0-9_]+$"
          title: id
          type: string
        name:
          description: Visible name of the pool.
          example: Starter Pool
          title: name
          type: string
        probabilities:
          $ref: '#/components/schemas/RarityProbability'
        items:
          description: List of gacha items in the pool.
          items:
            $ref: '#/components/schemas/Gacha'
          title: items
          type: array
      title: Pool
      type: object
    RarityProbability:
      example:
        legendaryProbability: 5.962134
        epicProbability: 1.4658129
        commonProbability: 0.8008282
        rareProbability: 6.0274563
      properties:
        commonProbability:
          default: 0.5
          format: float
          title: commonProbability
          type: number
        rareProbability:
          default: 0.3
          format: float
          title: rareProbability
          type: number
        epicProbability:
          default: 0.15
          format: float
          title: epicProbability
          type: number
        legendaryProbability:
          default: 0.05
          format: float
          title: legendaryProbability
          type: number
      title: RarityProbability
      type: object
    GachaRarity:
      description: Rarity level of the gacha
      enum:
      - common
      - rare
      - epic
      - legendary
      example: rare
      title: GachaRarity
      type: string
    UserId:
      description: UUID of user.
      format: uuid
      title: inventory_item_owner_id
      type: string
    Username:
      description: The username of the user
      example: LeoPanta01_
      minLength: 5
      pattern: "^[a-zA-Z0-9_]+$"
      title: username
      type: string
    Email:
      description: The user's email.
      example: l.pantani5@studenti.unipi.it/
      format: email
      title: email
      type: string
    AuctionStatus:
      default: active
      enum:
      - active
      - closed
      title: AuctionStatus
      type: string
    ItemId:
      description: UUID of single item.
      format: uuid
      title: inventory_item_id
      type: string
    AuctionId:
      description: UUID of the auction.
      format: uuid
      title: auction_uuid
      type: string
    Auction:
      example:
        auction_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inventory_item_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        starting_price: 0.8008282
        end_time: 2000-01-23T04:56:07.000+00:00
        inventory_item_owner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        current_bid: 6.0274563
        status: active
        current_bidder: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        auction_uuid:
          description: UUID of the auction.
          format: uuid
          title: auction_uuid
          type: string
        status:
          $ref: '#/components/schemas/AuctionStatus'
        inventory_item_owner_id:
          description: UUID of user.
          format: uuid
          title: inventory_item_owner_id
          type: string
        inventory_item_id:
          description: UUID of single item.
          format: uuid
          title: inventory_item_id
          type: string
        starting_price:
          description: Initial price set for the auction
          format: float
          title: starting_price
          type: number
        current_bid:
          description: Current highest bid
          format: float
          title: current_bid
          type: number
        current_bidder:
          description: UUID of user.
          format: uuid
          title: inventory_item_owner_id
          type: string
        end_time:
          description: "When the auction ends, in UTC timestamp"
          format: date-time
          title: end_time
          type: string
      title: Auction
      type: object
    User:
      example:
        joindate: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: l.pantani5@studenti.unipi.it/
        username: LeoPanta01_
      properties:
        id:
          description: UUID of user.
          format: uuid
          title: inventory_item_owner_id
          type: string
        username:
          description: The username of the user
          example: LeoPanta01_
          minLength: 5
          pattern: "^[a-zA-Z0-9_]+$"
          title: username
          type: string
        email:
          description: The user's email.
          example: l.pantani5@studenti.unipi.it/
          format: email
          title: email
          type: string
        joindate:
          description: Timestamp when user created their account
          format: date-time
          title: joindate
          type: string
      title: User
      type: object
    GachaId:
      description: UUID of the gacha
      format: uuid
      title: GachaId
      type: string
    Gacha:
      example:
        gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: Tower of Gray
        attributes:
          durability: A
          precision: A
          range: A
          power: A
          potential: A
          speed: A
        rarity: rare
      properties:
        gacha_uuid:
          description: UUID of the gacha
          format: uuid
          title: GachaId
          type: string
        name:
          description: Name of the gacha
          example: Tower of Gray
          title: name
          type: string
        rarity:
          $ref: '#/components/schemas/GachaRarity'
        attributes:
          $ref: '#/components/schemas/Gacha_attributes'
      title: Gacha
      type: object
    getAllFeedbacks_200_response_inner:
      example:
        feedback_id: 0
        content: content
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        content:
          description: Feedback content.
          title: content
          type: string
        feedback_id:
          description: Unique identifier of the feedback.
          title: feedback_id
          type: integer
        timestamp:
          description: Date and time when the feedback was created.
          format: date-time
          title: timestamp
          type: string
      title: getAllFeedbacks_200_response_inner
      type: object
    Gacha_attributes:
      additionalProperties:
        type: string
      example:
        durability: A
        precision: A
        range: A
        power: A
        potential: A
        speed: A
      properties:
        power:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        speed:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        durability:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        precision:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        range:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
        potential:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          type: string
      required:
      - durability
      - potential
      - power
      - precision
      - range
      - speed
      title: Gacha_attributes
      type: object
