openapi: 3.0.0
info:
  contact:
    email: support@gachaandgames.it
  description: |-
    API for managing gacha items, auctions, PVP battles, currency, and user authentication.

    Useful links:
    - [Project repository](https://github.com/LeonardoPantani/UNIPI-GachaAndGames)
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html#license-text
  termsOfService: https://localhost/tos
  title: Gacha System - OpenAPI 3.0
  version: 2.0.0
servers:
- description: Local server
  url: https://localhost
paths:
  /admin/auction/{auction_uuid}/update:
    put:
      description: Allows the update of an auction.
      operationId: update_auction
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: auction_uuid
        required: true
        schema:
          $ref: '#/components/schemas/AuctionId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auction'
        required: true
      responses:
        "200":
          description: Auction updated.
        "400":
          description: Invalid request.
        "401":
          description: Current bid cannot be lower than starting price.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Auction not found.
        "412":
          description: Starting price cannot be lower or equal to 0.
        "416":
          description: Current bid cannot be lower than 0.
        "417":
          description: Invalid date format.
        "503":
          description: Service unavailable. Please try again later.
      summary: Updates an auction.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/feedback/list:
    get:
      description: "Allows to retrieve all feedbacks, paginated."
      operationId: get_all_feedbacks
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FeedbackPreview'
                type: array
          description: Feedback Ids.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "503":
          description: Service unavailable. Please try again later.
      summary: Returns all feedbacks.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/feedback/{feedback_id}:
    get:
      description: Returns infos on a feedback.
      operationId: get_feedback_info
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: feedback_id
        required: true
        schema:
          $ref: '#/components/schemas/FeedbackId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackWithUsername'
          description: Successful operation.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Feedback not found.
        "503":
          description: Service unavailable. Please try again later.
      summary: Shows infos on a feedback.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/create:
    post:
      description: Allows the creation of a gacha.
      operationId: create_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
        required: true
      responses:
        "201":
          description: Gacha created.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "409":
          description: The provided gacha uuid is already in use.
        "503":
          description: Service unavailable. Please try again later.
      summary: Creates a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/{gacha_uuid}/delete:
    delete:
      description: Allows the deletion of a gacha.
      operationId: delete_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      responses:
        "200":
          description: Gacha deleted.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Gacha not found.
        "503":
          description: Service unavailable. Please try again later.
      summary: Deletes a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/gacha/{gacha_uuid}/update:
    put:
      description: Allows the update of a gacha.
      operationId: update_gacha
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: gacha_uuid
        required: true
        schema:
          $ref: '#/components/schemas/GachaId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gacha'
        required: true
      responses:
        "200":
          description: Gacha updated.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Gacha not found.
        "406":
          description: Gacha UUID in request is different from the one inside the
            gacha object.
        "503":
          description: Service unavailable. Please try again later.
      summary: Updates a gacha.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/health_check:
    get:
      description: Returns 200 if service is healthy.
      operationId: admin_health_check_get
      responses:
        "200":
          description: Service operational.
      summary: Gives information on service status.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/logs/:
    get:
      description: Allows to retrieve logs of the system.
      operationId: get_system_logs
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Name of the service whose logs are requested.
        explode: true
        in: query
        name: service_type
        required: false
        schema:
          type: string
        style: form
      - description: Name of the endpoint whose logs are requested
        explode: true
        in: query
        name: endpoint
        required: false
        schema:
          type: string
        style: form
      - description: Level of criticality
        explode: true
        in: query
        name: level
        required: false
        schema:
          default: info
          enum:
          - general
          - info
          - warning
          - error
          type: string
        style: form
      - description: Number of seconds of the interval to look in
        explode: true
        in: query
        name: interval
        required: false
        schema:
          default: 3600
          type: integer
        style: form
      - description: "Interval starting time in Unix time (seconds since January 1,\
          \ 1970)."
        explode: true
        in: query
        name: start_time
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Log'
                type: array
          description: Latest system logs.
        "403":
          description: This account is not authorized to perform this action.
        "503":
          description: Service unavailable. Please try again later.
      summary: Returns the system logs.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/create:
    post:
      description: Allows the creation of a pool.
      operationId: create_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        "201":
          description: Pool created.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Item UUID not found in database.
        "409":
          description: The provided pool id is already in use.
        "412":
          description: Invalid probabilities.
        "416":
          description: Price should be a positive number.
        "503":
          description: Service unavailable. Please try again later.
      summary: Creates a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/{pool_id}/delete:
    delete:
      description: Allows the deletion of a pool.
      operationId: delete_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      responses:
        "200":
          description: Pool deleted.
        "400":
          description: Invalid fields.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Pool not found.
        "503":
          description: Service unavailable. Please try again later.
      summary: Deletes a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/pool/{pool_id}/update:
    put:
      description: Allows the update of a pool.
      operationId: update_pool
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: pool_id
        required: true
        schema:
          $ref: '#/components/schemas/PoolId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
        required: true
      responses:
        "200":
          description: Pool updated.
        "400":
          description: Invalid request.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: Pool not found.
        "406":
          description: ool UUID in request is different from the one inside the pool
            object.
        "412":
          description: Invalid probabilities.
        "416":
          description: Price should be a positive number.
        "503":
          description: Service unavailable. Please try again later.
      summary: Updates a pool.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/list:
    get:
      description: "Allows to retrieve all profiles, paginated."
      operationId: get_all_profiles
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserFull'
                type: array
          description: User profile.
        "403":
          description: This account is not authorized to perform this action.
        "503":
          description: Service unavailable. Please try again later.
      summary: Returns all profiles.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/ban:
    delete:
      description: Allows an admin to delete a user's profile.
      operationId: ban_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      responses:
        "200":
          description: Profile deleted.
        "400":
          description: Invalid fields.
        "404":
          description: User not found.
        "403":
          description: This account is not authorized to perform this action.
        "406":
          description: You cannot delete your account like this.
        "409":
          description: Cannot ban a user with the ADMIN role.
        "503":
          description: Service unavailable. Please try again later.
      summary: Deletes a profile.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/edit:
    put:
      description: Allows an admin to edit a user's profile.
      operationId: edit_user_profile
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      - explode: true
        in: query
        name: email
        required: false
        schema:
          $ref: '#/components/schemas/Email'
        style: form
      - explode: true
        in: query
        name: username
        required: false
        schema:
          $ref: '#/components/schemas/Username'
        style: form
      responses:
        "200":
          description: Profile successfully updated.
        "304":
          description: No changes to profile applied.
        "401":
          description: This account is not authorized to perform this action.
        "403":
          description: Not authorized to perform this action.
        "404":
          description: User not found.
        "503":
          description: Service unavailable. Please try again later.
      summary: Edits properties of a profile.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
  /admin/profile/{user_uuid}/history:
    get:
      description: Allows to retrieve history of a user.
      operationId: get_user_history
      parameters:
      - explode: true
        in: cookie
        name: session
        required: true
        schema:
          type: string
        style: form
      - explode: false
        in: path
        name: user_uuid
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
        style: simple
      - description: Type of history to show.
        explode: true
        in: query
        name: history_type
        required: true
        schema:
          enum:
          - bundle
          - ingame
          type: string
        style: form
      - description: Page number of the list.
        explode: true
        in: query
        name: page_number
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserHistory_200_response'
          description: User transaction history.
        "400":
          description: Invalid history type.
        "403":
          description: This account is not authorized to perform this action.
        "404":
          description: User not found.
        "503":
          description: Service unavailable. Please try again later.
      summary: Returns history of a user.
      tags:
      - admin
      x-openapi-router-controller: openapi_server.controllers.admin_controller
components:
  schemas:
    Log:
      example:
        service_type: auth
        endpoint: logout
        level: general
        message: User 'SpeedwagonAdmin' logged out.
        timestamp: 1325203200
      properties:
        timestamp:
          description: "Unix time in seconds since January 1, 1970."
          example: 1325203200
          format: int64
          title: timestamp
          type: integer
        message:
          description: Content of the log
          example: User 'SpeedwagonAdmin' logged out.
          title: message
          type: string
        service_type:
          description: Name of the service
          example: auth
          title: service_type
          type: string
        endpoint:
          description: Name of the endpoint
          example: logout
          title: endpoint
          type: string
        level:
          description: Level of criticality
          enum:
          - general
          - info
          - warning
          - error
          title: level
          type: string
      title: Log
      type: object
    UserFull:
      example:
        joindate: 2000-01-23T04:56:07.000+00:00
        role: USER
        pvp_score: 5
        currency: 100
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: l.pantani5@studenti.unipi.it
        username: LeoPanta01_
      properties:
        id:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        username:
          description: "The user's username. Must be at least 5 characters long and\
            \ contain only letters, numbers, and underscores."
          example: LeoPanta01_
          minLength: 5
          pattern: "^[a-zA-Z0-9_]+$"
          title: username
          type: string
        email:
          description: The user's email.
          example: l.pantani5@studenti.unipi.it
          title: email
          type: string
        joindate:
          description: Timestamp when user created their account
          format: date-time
          title: joindate
          type: string
        currency:
          description: In-game currency of the user.
          example: 100
          title: currency
          type: integer
        pvp_score:
          description: PvP score of the user.
          example: 5
          title: pvp_score
          type: integer
        role:
          $ref: '#/components/schemas/Roles'
      title: UserFull
      type: object
    Roles:
      description: User's role in the system.
      enum:
      - USER
      - ADMIN
      title: Roles
      type: string
    GachaStat:
      description: Stat of a gacha.
      example: A
      pattern: "^[A-Ea-e]$"
      title: GachaStat
      type: string
    CurrencyName:
      description: Currency code-name
      example: EUR
      pattern: "^[A-Z]{3}$"
      title: CurrencyName
      type: string
    PoolId:
      description: Internal code-name for the pool.
      example: pool_starter
      pattern: "^[a-zA-Z0-9_]+$"
      title: codename
      type: string
    Pool:
      example:
        probability_rare: 6.0274563
        price: 15
        codename: pool_starter
        probability_epic: 1.4658129
        probability_common: 0.8008282
        probability_legendary: 5.962134
        public_name: Starter Pool
        items:
        - null
        - null
      properties:
        codename:
          description: Internal code-name for the pool.
          example: pool_starter
          pattern: "^[a-zA-Z0-9_]+$"
          title: codename
          type: string
        public_name:
          description: Visible name of the pool.
          example: Starter Pool
          title: public_name
          type: string
        price:
          description: In-game price to pull a gacha from this pool
          example: 15
          minimum: 1
          title: price
          type: integer
        probability_common:
          default: 0.5
          format: float
          title: probability_common
          type: number
        probability_rare:
          default: 0.3
          format: float
          title: probability_rare
          type: number
        probability_epic:
          default: 0.15
          format: float
          title: probability_epic
          type: number
        probability_legendary:
          default: 0.05
          format: float
          title: probability_legendary
          type: number
        items:
          description: List of gacha items in the pool.
          items:
            $ref: '#/components/schemas/GachaId'
          title: items
          type: array
      title: Pool
      type: object
    GachaRarity:
      description: Rarity level of the gacha.
      enum:
      - common
      - rare
      - epic
      - legendary
      example: rare
      title: GachaRarity
      type: string
    UserId:
      description: UUID of user.
      format: uuid
      title: UserId
      type: string
    Username:
      description: "The user's username. Must be at least 5 characters long and contain\
        \ only letters, numbers, and underscores."
      example: LeoPanta01_
      minLength: 5
      pattern: "^[a-zA-Z0-9_]+$"
      title: username
      type: string
    Email:
      description: The user's email.
      example: l.pantani5@studenti.unipi.it
      title: email
      type: string
    AuctionStatus:
      default: open
      enum:
      - open
      - closed
      title: AuctionStatus
      type: string
    ItemId:
      description: UUID of single item.
      format: uuid
      title: inventory_item_id
      type: string
    AuctionId:
      description: UUID of the auction.
      format: uuid
      title: auction_uuid
      type: string
    Auction:
      example:
        auction_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inventory_item_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        starting_price: 0.8008282
        end_time: 2000-01-23T04:56:07.000+00:00
        inventory_item_owner_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        current_bid: 6.0274563
        status: open
        current_bidder: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        auction_uuid:
          description: UUID of the auction.
          format: uuid
          title: auction_uuid
          type: string
        status:
          $ref: '#/components/schemas/AuctionStatus'
        inventory_item_owner_id:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        inventory_item_id:
          description: UUID of single item.
          format: uuid
          title: inventory_item_id
          type: string
        starting_price:
          description: Initial price set for the auction
          format: float
          title: starting_price
          type: number
        current_bid:
          description: Current highest bid
          format: float
          title: current_bid
          type: number
        current_bidder:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        end_time:
          description: "When the auction ends, in UTC timestamp"
          format: date-time
          title: end_time
          type: string
      title: Auction
      type: object
    GachaId:
      description: UUID of the gacha
      format: uuid
      title: GachaId
      type: string
    Gacha:
      example:
        gacha_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: Tower of Gray
        attributes:
          durability: A
          precision: A
          range: A
          power: A
          potential: A
          speed: A
        rarity: rare
      properties:
        gacha_uuid:
          description: UUID of the gacha
          format: uuid
          title: GachaId
          type: string
        name:
          description: Name of the gacha
          example: Tower of Gray
          title: name
          type: string
        rarity:
          $ref: '#/components/schemas/GachaRarity'
        attributes:
          $ref: '#/components/schemas/Gacha_attributes'
      title: Gacha
      type: object
    FeedbackPreview:
      example:
        user_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 7
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Id of feedback.
          example: 7
          title: id
          type: integer
        user_uuid:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        timestamp:
          description: Timestamp when user created feedback
          format: date-time
          title: timestamp
          type: string
      title: FeedbackPreview
      type: object
    FeedbackId:
      description: Id of feedback.
      example: 7
      title: id
      type: integer
    FeedbackWithUsername:
      example:
        user_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 7
        content: I love this game11!
        username: LeoPanta01_
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Id of feedback.
          example: 7
          title: id
          type: integer
        user_uuid:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        username:
          description: "The user's username. Must be at least 5 characters long and\
            \ contain only letters, numbers, and underscores."
          example: LeoPanta01_
          minLength: 5
          pattern: "^[a-zA-Z0-9_]+$"
          title: username
          type: string
        content:
          description: Actual feedback content.
          example: I love this game11!
          title: content
          type: string
        timestamp:
          description: Timestamp when user created feedback
          format: date-time
          title: timestamp
          type: string
      title: FeedbackWithUsername
      type: object
    HistoryListINGAME:
      items:
        $ref: '#/components/schemas/HistoryListINGAME_inner'
      type: array
    HistoryListBUNDLE:
      items:
        $ref: '#/components/schemas/HistoryListBUNDLE_inner'
      type: array
    getUserHistory_200_response:
      oneOf:
      - $ref: '#/components/schemas/HistoryListINGAME'
      - $ref: '#/components/schemas/HistoryListBUNDLE'
      title: getUserHistory_200_response
    Gacha_attributes:
      example:
        durability: A
        precision: A
        range: A
        power: A
        potential: A
        speed: A
      properties:
        power:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          title: GachaStat
          type: string
        speed:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          title: GachaStat
          type: string
        durability:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          title: GachaStat
          type: string
        precision:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          title: GachaStat
          type: string
        range:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          title: GachaStat
          type: string
        potential:
          description: Stat of a gacha.
          example: A
          pattern: "^[A-Ea-e]$"
          title: GachaStat
          type: string
      required:
      - durability
      - potential
      - power
      - precision
      - range
      - speed
      title: Gacha_attributes
      type: object
    HistoryListINGAME_inner:
      example:
        user_uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        credits: 5000
        transaction_type: bought_bundle
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        user_uuid:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        timestamp:
          description: Timestamp when user created feedback
          format: date-time
          title: timestamp
          type: string
        credits:
          description: No. of credits.
          example: 5000
          title: credits
          type: integer
        transaction_type:
          example: bought_bundle
          title: transaction_type
          type: string
      title: HistoryListINGAME_inner
      type: object
    HistoryListBUNDLE_inner:
      properties:
        user_uuid:
          description: UUID of user.
          format: uuid
          title: UserId
          type: string
        timestamp:
          description: Timestamp when user created feedback
          format: date-time
          title: timestamp
          type: string
        codename:
          title: codename
          type: string
        currency_name:
          description: Currency code-name
          example: EUR
          pattern: "^[A-Z]{3}$"
          title: CurrencyName
          type: string
      title: HistoryListBUNDLE_inner
      type: object
