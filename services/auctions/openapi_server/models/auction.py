from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.auction_status import AuctionStatus
from openapi_server import util

from openapi_server.models.auction_status import AuctionStatus  # noqa: E501

class Auction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auction_uuid=None, status=AuctionStatus.ACTIVE, inventory_item_owner_id=None, inventory_item_id=None, starting_price=None, current_bid=None, current_bidder=None, end_time=None):  # noqa: E501
        """Auction - a model defined in OpenAPI

        :param auction_uuid: The auction_uuid of this Auction.  # noqa: E501
        :type auction_uuid: str
        :param status: The status of this Auction.  # noqa: E501
        :type status: AuctionStatus
        :param inventory_item_owner_id: The inventory_item_owner_id of this Auction.  # noqa: E501
        :type inventory_item_owner_id: str
        :param inventory_item_id: The inventory_item_id of this Auction.  # noqa: E501
        :type inventory_item_id: str
        :param starting_price: The starting_price of this Auction.  # noqa: E501
        :type starting_price: float
        :param current_bid: The current_bid of this Auction.  # noqa: E501
        :type current_bid: float
        :param current_bidder: The current_bidder of this Auction.  # noqa: E501
        :type current_bidder: str
        :param end_time: The end_time of this Auction.  # noqa: E501
        :type end_time: datetime
        """
        self.openapi_types = {
            'auction_uuid': str,
            'status': AuctionStatus,
            'inventory_item_owner_id': str,
            'inventory_item_id': str,
            'starting_price': float,
            'current_bid': float,
            'current_bidder': str,
            'end_time': datetime
        }

        self.attribute_map = {
            'auction_uuid': 'auction_uuid',
            'status': 'status',
            'inventory_item_owner_id': 'inventory_item_owner_id',
            'inventory_item_id': 'inventory_item_id',
            'starting_price': 'starting_price',
            'current_bid': 'current_bid',
            'current_bidder': 'current_bidder',
            'end_time': 'end_time'
        }

        self._auction_uuid = auction_uuid
        self._status = status
        self._inventory_item_owner_id = inventory_item_owner_id
        self._inventory_item_id = inventory_item_id
        self._starting_price = starting_price
        self._current_bid = current_bid
        self._current_bidder = current_bidder
        self._end_time = end_time

    @classmethod
    def from_dict(cls, dikt) -> 'Auction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Auction of this Auction.  # noqa: E501
        :rtype: Auction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auction_uuid(self) -> str:
        """Gets the auction_uuid of this Auction.

        UUID of the auction.  # noqa: E501

        :return: The auction_uuid of this Auction.
        :rtype: str
        """
        return self._auction_uuid

    @auction_uuid.setter
    def auction_uuid(self, auction_uuid: str):
        """Sets the auction_uuid of this Auction.

        UUID of the auction.  # noqa: E501

        :param auction_uuid: The auction_uuid of this Auction.
        :type auction_uuid: str
        """

        self._auction_uuid = auction_uuid

    @property
    def status(self) -> AuctionStatus:
        """Gets the status of this Auction.


        :return: The status of this Auction.
        :rtype: AuctionStatus
        """
        return self._status

    @status.setter
    def status(self, status: AuctionStatus):
        """Sets the status of this Auction.


        :param status: The status of this Auction.
        :type status: AuctionStatus
        """

        self._status = status

    @property
    def inventory_item_owner_id(self) -> str:
        """Gets the inventory_item_owner_id of this Auction.

        UUID of user.  # noqa: E501

        :return: The inventory_item_owner_id of this Auction.
        :rtype: str
        """
        return self._inventory_item_owner_id

    @inventory_item_owner_id.setter
    def inventory_item_owner_id(self, inventory_item_owner_id: str):
        """Sets the inventory_item_owner_id of this Auction.

        UUID of user.  # noqa: E501

        :param inventory_item_owner_id: The inventory_item_owner_id of this Auction.
        :type inventory_item_owner_id: str
        """

        self._inventory_item_owner_id = inventory_item_owner_id

    @property
    def inventory_item_id(self) -> str:
        """Gets the inventory_item_id of this Auction.

        UUID of single item.  # noqa: E501

        :return: The inventory_item_id of this Auction.
        :rtype: str
        """
        return self._inventory_item_id

    @inventory_item_id.setter
    def inventory_item_id(self, inventory_item_id: str):
        """Sets the inventory_item_id of this Auction.

        UUID of single item.  # noqa: E501

        :param inventory_item_id: The inventory_item_id of this Auction.
        :type inventory_item_id: str
        """

        self._inventory_item_id = inventory_item_id

    @property
    def starting_price(self) -> float:
        """Gets the starting_price of this Auction.

        Initial price set for the auction  # noqa: E501

        :return: The starting_price of this Auction.
        :rtype: float
        """
        return self._starting_price

    @starting_price.setter
    def starting_price(self, starting_price: float):
        """Sets the starting_price of this Auction.

        Initial price set for the auction  # noqa: E501

        :param starting_price: The starting_price of this Auction.
        :type starting_price: float
        """

        self._starting_price = starting_price

    @property
    def current_bid(self) -> float:
        """Gets the current_bid of this Auction.

        Current highest bid  # noqa: E501

        :return: The current_bid of this Auction.
        :rtype: float
        """
        return self._current_bid

    @current_bid.setter
    def current_bid(self, current_bid: float):
        """Sets the current_bid of this Auction.

        Current highest bid  # noqa: E501

        :param current_bid: The current_bid of this Auction.
        :type current_bid: float
        """

        self._current_bid = current_bid

    @property
    def current_bidder(self) -> str:
        """Gets the current_bidder of this Auction.

        UUID of user.  # noqa: E501

        :return: The current_bidder of this Auction.
        :rtype: str
        """
        return self._current_bidder

    @current_bidder.setter
    def current_bidder(self, current_bidder: str):
        """Sets the current_bidder of this Auction.

        UUID of user.  # noqa: E501

        :param current_bidder: The current_bidder of this Auction.
        :type current_bidder: str
        """

        self._current_bidder = current_bidder

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this Auction.

        When the auction ends, in UTC timestamp  # noqa: E501

        :return: The end_time of this Auction.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this Auction.

        When the auction ends, in UTC timestamp  # noqa: E501

        :param end_time: The end_time of this Auction.
        :type end_time: datetime
        """

        self._end_time = end_time
